scpd <- full_join(scp, DEPARTMENT) %>%
na.omit() # joining data by DEPARTMENT_ID
output <- scp %>%
filter(DEPARTMENT_ID != DEPARTMENT_ID_COURSE) %>%
select(`Professor Name` = PROFESSOR_NAME,
`Course Name` = COURSE_NAME) %>%
distinct()
output
PROFESSOR <- PROFESSOR %>%
rename(PROFESSOR_ID = ID,
PROFESSOR_NAME = NAME) %>%
dplyr::distinct() %>%
na.omit() %>%
as_tibble()
PROFESSOR
PROFESSOR <- data.frame(NAME = c('Nancy Daniels', 'Billy Knight',
"Harry Myers", "Antonio Rodriguez",
"Nicole Gome", "Eugene George", "Gloria Vasquez",
"Joyce Flores", "Daniel Gilbert",
"Matthew Stevens"),
DEPARTMENT_ID = c(4, 1, 4, 3, 2, 5, 4, 1, 5, 2),
SALARY = c(7169, 9793, 25194, 9686, 30860, 10487,
6353, 27000, 35000, 26000))
DEPARTMENT <- data.frame(ID = c(3, 5, 6, 2, 4, 1),
NAME = c("Biological Sciences", "Technology",
"Humanities & Social Sciences", "Clinical Medicine",
"Arts and Humanities", "Physical Sciences"))
COURSE <- data.frame(NAME = c("Clinical Biochemistry", "Astronomy",
"Clinical Neuroscience", "Pure Mathematics and Mathematical Statistics",
"Geography", "Chemistry", "Physics", "Earth Science",
"Materials Science and Metallurgy",
"Applied Mathematics and Theoretical Physics"),
DEPARTMENT_ID = c(2, 1, 2, 1, 1, 1, 1, 1, 1, 1),
CREDITS = c(3, 6, 5, 3, 7, 1, 8, 7, 5, 5))
SCHEDULE <- data.frame(PROFESSOR_ID = c(4, 3, 1, 7, 4, 9, 10, 1, 1, 1),
COURSE_ID = c(4, 3, 7, 7, 6, 3, 2, 1, 2, 7),
SEMESTER = c(3, 1, 5, 1, 1, 1, 4, 3, 3, 5),
YEAR = c(2003, 2011, 2011, 2010, 2001, 2012, 2009, 2014, 2008, 2007))
PROFESSOR <- PROFESSOR %>%
rename(PROFESSOR_ID = ID,
PROFESSOR_NAME = NAME) %>%
dplyr::distinct() %>%
na.omit() %>%
as_tibble()
PROFESSOR
PROFESSOR <- data.frame(ID = 1:10,
NAME = c('Nancy Daniels', 'Billy Knight',
"Harry Myers", "Antonio Rodriguez",
"Nicole Gome", "Eugene George", "Gloria Vasquez",
"Joyce Flores", "Daniel Gilbert",
"Matthew Stevens"),
DEPARTMENT_ID = c(4, 1, 4, 3, 2, 5, 4, 1, 5, 2),
SALARY = c(7169, 9793, 25194, 9686, 30860, 10487,
6353, 27000, 35000, 26000))
DEPARTMENT <- data.frame(ID = c(3, 5, 6, 2, 4, 1),
NAME = c("Biological Sciences", "Technology",
"Humanities & Social Sciences", "Clinical Medicine",
"Arts and Humanities", "Physical Sciences"))
COURSE <- data.frame(NAME = c("Clinical Biochemistry", "Astronomy",
"Clinical Neuroscience", "Pure Mathematics and Mathematical Statistics",
"Geography", "Chemistry", "Physics", "Earth Science",
"Materials Science and Metallurgy",
"Applied Mathematics and Theoretical Physics"),
DEPARTMENT_ID = c(2, 1, 2, 1, 1, 1, 1, 1, 1, 1),
CREDITS = c(3, 6, 5, 3, 7, 1, 8, 7, 5, 5))
SCHEDULE <- data.frame(PROFESSOR_ID = c(4, 3, 1, 7, 4, 9, 10, 1, 1, 1),
COURSE_ID = c(4, 3, 7, 7, 6, 3, 2, 1, 2, 7),
SEMESTER = c(3, 1, 5, 1, 1, 1, 4, 3, 3, 5),
YEAR = c(2003, 2011, 2011, 2010, 2001, 2012, 2009, 2014, 2008, 2007))
PROFESSOR <- PROFESSOR %>%
rename(PROFESSOR_ID = ID,
PROFESSOR_NAME = NAME) %>%
dplyr::distinct() %>%
na.omit() %>%
as_tibble()
PROFESSOR
DEPARTMENT <- DEPARTMENT %>%
rename(DEPARTMENT_ID = ID,
DEPARTMENT_NAME = NAME) %>%
dplyr::distinct() %>%
na.omit() %>%
as_tibble()
COURSE <- COURSE %>%
rename(COURSE_ID = ID,
DEPARTMENT_ID_COURSE = DEPARTMENT_ID,
COURSE_NAME = NAME) %>%
dplyr::distinct() %>%
na.omit() %>%
as_tibble()
COURSE <- data.frame(ID = c(9, 4, 10, 1, 6, 8, 5, 3, 7, 2),
NAME = c("Clinical Biochemistry", "Astronomy",
"Clinical Neuroscience", "Pure Mathematics and Mathematical Statistics",
"Geography", "Chemistry", "Physics", "Earth Science",
"Materials Science and Metallurgy",
"Applied Mathematics and Theoretical Physics"),
DEPARTMENT_ID = c(2, 1, 2, 1, 1, 1, 1, 1, 1, 1),
CREDITS = c(3, 6, 5, 3, 7, 1, 8, 7, 5, 5))
COURSE <- COURSE %>%
rename(COURSE_ID = ID,
DEPARTMENT_ID_COURSE = DEPARTMENT_ID,
COURSE_NAME = NAME) %>%
dplyr::distinct() %>%
na.omit() %>%
as_tibble()
SCHEDULE <- SCHEDULE %>%
dplyr::distinct() %>% na.omit() %>%
as_tibble()
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
PROFESSOR <- data.frame(ID = 1:10,
NAME = c('Nancy Daniels', 'Billy Knight',
"Harry Myers", "Antonio Rodriguez",
"Nicole Gome", "Eugene George", "Gloria Vasquez",
"Joyce Flores", "Daniel Gilbert",
"Matthew Stevens"),
DEPARTMENT_ID = c(4, 1, 4, 3, 2, 5, 4, 1, 5, 2),
SALARY = c(7169, 9793, 25194, 9686, 30860, 10487,
6353, 27000, 35000, 26000))
DEPARTMENT <- data.frame(ID = c(3, 5, 6, 2, 4, 1),
NAME = c("Biological Sciences", "Technology",
"Humanities & Social Sciences", "Clinical Medicine",
"Arts and Humanities", "Physical Sciences"))
COURSE <- data.frame(ID = c(9, 4, 10, 1, 6, 8, 5, 3, 7, 2),
NAME = c("Clinical Biochemistry", "Astronomy",
"Clinical Neuroscience", "Pure Mathematics and Mathematical Statistics",
"Geography", "Chemistry", "Physics", "Earth Science",
"Materials Science and Metallurgy",
"Applied Mathematics and Theoretical Physics"),
DEPARTMENT_ID = c(2, 1, 2, 1, 1, 1, 1, 1, 1, 1),
CREDITS = c(3, 6, 5, 3, 7, 1, 8, 7, 5, 5))
SCHEDULE <- data.frame(PROFESSOR_ID = c(4, 3, 1, 7, 4, 9, 10, 1, 1, 1),
COURSE_ID = c(4, 3, 7, 7, 6, 3, 2, 1, 2, 7),
SEMESTER = c(3, 1, 5, 1, 1, 1, 4, 3, 3, 5),
YEAR = c(2003, 2011, 2011, 2010, 2001, 2012, 2009, 2014, 2008, 2007))
PROFESSOR <- PROFESSOR %>%
rename(PROFESSOR_ID = ID,
PROFESSOR_NAME = NAME) %>%
dplyr::distinct() %>%
na.omit() %>%
as_tibble()
DEPARTMENT <- DEPARTMENT %>%
rename(DEPARTMENT_ID = ID,
DEPARTMENT_NAME = NAME) %>%
dplyr::distinct() %>%
na.omit() %>%
as_tibble()
COURSE <- COURSE %>%
rename(COURSE_ID = ID,
DEPARTMENT_ID_COURSE = DEPARTMENT_ID,
COURSE_NAME = NAME) %>%
dplyr::distinct() %>%
na.omit() %>%
as_tibble()
SCHEDULE <- SCHEDULE %>%
dplyr::distinct() %>% na.omit() %>%
as_tibble()
sc <- full_join(SCHEDULE, COURSE) %>%
na.omit() # joining data by COURSE_ID
scp <- full_join(sc, PROFESSOR) %>%
na.omit() # joining data by PROFESSOR_ID
scpd <- full_join(scp, DEPARTMENT) %>%
na.omit() # joining data by DEPARTMENT_ID
output <- scp %>%
filter(DEPARTMENT_ID != DEPARTMENT_ID_COURSE) %>%
select(`Professor Name` = PROFESSOR_NAME,
`Course Name` = COURSE_NAME) %>%
distinct()
output
output <- scp %>%
filter(DEPARTMENT_ID != DEPARTMENT_ID_COURSE) %>%
select(`Professor Name` = PROFESSOR_NAME,
`Course Name` = COURSE_NAME) %>%
arrange(`Professor Name`) %>%
distinct()
list.files('~/Applications')
list.files('~/Applications/R')
list.files('~/Applications/R', recursive=T)
list.files('~/Applications', recursive=T, patten='^R')
list.files('~/Applications', recursive=T, pattern='^R')
list.files('~/Applications', recursive=T, pattern='^R.')
list.files('~/Applications', recursive=T, pattern='^R\\.')
list.files('~/Applications', recursive=T, pattern='^RS')
list.files('Users/Srhoads/Applications', recursive=T, pattern='^RS')
list.files('Users/Srhoads/Applications', recursive=T, pattern='^R')
system("type R")
R.home()
file.path(R.home("bin"), "R")
file.path(R.home("bin"), "R")
file.path(R.home(), "bin", "R");
R.home("bin")
R.home()
#' A function to paste a vector in a regex way with '|' partial
#'
#' This function allows you to paste a vector in a regex way with '|' partial
#' @export
#' @examples
#' paste_regex_partial(v, collapse='|')
joinbyoperator_partial <- function(v, operator='or') {
if(tolower(operator)=='or') v <- paste0(v, collapse='|')
else if(tolower(operator)=='and') v <- paste0(v, collapse='.*')
else v <- paste0(v, collapse=operator)
v
}
joinbyoperator_partial(c('jdkshf', 'djsfh', 'mew'))
joinbyoperator_partial(c('jdkshf', 'djsfh', 'mew'), 'and')
#' A function to paste a vector in a regex way with '|' partial
#'
#' This function allows you to paste a vector in a regex way with '|' partial
#' @export
#' @examples
#' paste_regex_partial(v, collapse='|')
joinbyoperator_partial <- function(v, operator='or') {
if(tolower(operator)=='or') v <- paste0(v, collapse='|')
else if(tolower(operator)=='and'|tolower(operator)=='&') v <- paste0(v, collapse='.*')
else v <- paste0(v, collapse=operator)
v
}
joinbyoperator_partial(c('jdkshf', 'djsfh', 'mew'), 'and')
joinbyoperator_partial(c('jdkshf', 'djsfh', 'mew'), '&')
joinbyoperator_exact <- function(v, operator='or') {
if(tolower(operator)=='or') v <- paste0('^', v, '$', collapse='|')
else if(tolower(operator)=='and'|tolower(operator)=='&') v <- paste0('^', v, '$', collapse='.*')
else v <- paste0('^', v, '$', collapse=operator)
v
}
joinbyoperator_exact(c('jdkshf', 'djsfh', 'mew'), 'and')
joinbyoperator_exact(c('jdkshf', 'djsfh', 'mew'), 'or')
joinbyoperator_exact(c('jdkshf', 'djsfh', 'mew'), '|')
joinbyoperator_exact(c('jdkshf', 'djsfh', 'mew'), '.*')
joinbyoperator_partial <- function(v, operator='or') {
if(tolower(operator)=='or') collapse <- '|'
else if(tolower(operator)=='and'|tolower(operator)=='&') collapse <- '.*'
else collapse <- operator
paste0(v, collapse=collapse)
}
joinbyoperator_partial(c('jdkshf', 'djsfh', 'mew'), '.*')
joinbyoperator_partial(c('jdkshf', 'djsfh', 'mew'), 'or')
joinbyoperator_partial(c('jdkshf', 'djsfh', 'mew'), 'OR')
joinbyoperator <- function(v, operator='or', exact=F, tolower=F) {
if(exact) v <- joinbyoperator_exact(v, operator=operator)
else v <- joinbyoperator_partial(v, operator=operator)
if(tolower) v <- tolower(v)
v
}
joinbyoperator(c('jdkshf', 'djsfh', 'mew'), 'OR')
joinbyoperator(c('jdkshf', 'djsfh', 'mew'), 'and')
joinbyoperator(c('jdkshf', 'djsfh', 'mew'), 'AND')
joinbyoperator(c('jdkshf', 'djsfh', 'mew'), 'AD')
joinbyoperator(c('jdkshf', 'djsfh', 'mew'), 'OR')
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), 'OR', tolower=T)
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), 'OR', tolower=F)
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), 'OR', exact=T, tolower=F)
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), 'OR', exact=T, tolower=T)
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), 'and', exact=T, tolower=T)
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), '|', exact=T, tolower=T)
#' A function to paste a vector in a regex way with and/or operators partially (not exact matches)
#'
#' This function allows you to paste a vector in a regex way with '|' partial
#' @export
#' @examples
#' joinbyoperator_partial(v, operator='or', tolower=F)
joinbyoperator_partial <- function(v, operator='or', tolower=F) {
if(tolower(operator)=='or') collapse <- '|'
else if(tolower(operator)=='and'|tolower(operator)=='&') collapse <- '.*'
else collapse <- operator
v <- paste0(v, collapse=collapse)
if(tolower) v <- tolower(v)
v
}
#' A function to paste a vector in a regex way with and/or operators partially (exact matches)
#'
#' This function allows you to paste a vector in a regex way with '|' partial
#' @export
#' @examples
#' joinbyoperator_exact(v, operator='or', tolower=F)
joinbyoperator_exact <- function(v, operator='or', tolower=F) {
if(tolower(operator)=='or') collapse <- '|'
else if(tolower(operator)=='and'|tolower(operator)=='&') collapse <- '.*'
else collapse <- operator
v <- paste0('^', v, '$', collapse=collapse)
if(tolower) v <- tolower(v)
v
}
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), 'and', exact=T, tolower=T)
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), '$', exact=T, tolower=T)
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), '|', exact=T, tolower=T)
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), 'OR', exact=T, tolower=T)
joinbyoperator(c('jdkshf', 'djsfh', 'mEEEew'), 'OR', exact=F, tolower=T)
is.list(mtcars)
is.data.frame(mtcars)
is.data.frame(list(mtcars))
is.data.frame(list(mtcars)) & !is.data.frame(list(mtcars))
is.list(list(mtcars)) & !is.data.frame(list(mtcars))
#' A function to get the names of a dataframe or list
#'
#' This function allows you to
#' @export
#' @examples
#' list_names(mylist, unique = F)
names_ <- function(x, unique=F){
if(is.list(x) & !is.data.frame()) nms <- list_names(x, unique=unique)
else nms <- names(x)
}
names_(list(mtcars))
#' A function to get the names of a dataframe or list
#'
#' This function allows you to
#' @export
#' @examples
#' list_names(mylist, unique = F)
names_ <- function(x, unique=F){
if(is.list(x) & !is.data.frame()) nms <- list_names(x, unique=unique)
else nms <- names(x)
nms
}
names_(list(mtcars))
#' A function to get the names of a dataframe or list
#'
#' This function allows you to
#' @export
#' @examples
#' list_names(mylist, unique = F)
names_ <- function(x, unique=F){
if(is.list(x) & !is.data.frame(x)) nms <- list_names(x, unique=unique)
else nms <- names(x)
nms
}
names_(list(mtcars))
names_((mtcars))
names(list(mtcars))
names_((mtcars))
names((mtcars))
#' A function to get the names of a dataframe or list
#'
#' This function allows you to
#' @export
#' @examples
#' names_(mylist, unique = F)
names_ <- function(x, unique=F, sort=F){
if(is.list(x) & !is.data.frame(x)) nms <- list_names(x, unique=unique)
else nms <- names(x)
if(sort) nms <- sort(nms)
nms
}
names_(mtcars)
names_(mtcars, sort=T)
names_(list(mtcars), sort=T)
names_(as.list(mtcars), sort=T)
as.list(mtcars)
names_(as.list(mtcars), sort=F)
list(mtcars)
list(mtcars, iris)
names_(list(mtcars, iris))
iris
names_(list(mtcars, iris), sort=T)
names_(list(mtcars, iris))
try_ <- function(x, fxn){
tryCatch(fxn(x),
error = function(e) x)
}
try_(mtcars, names)
try_(mew, names)
try_('mew', names)
try_('mew', names0)
try_('mew', data.frame())
try_(mtcars, data.frame())
try_(mtcars, data.frame
try_(mtcars, data.frame)
try_(mtcars, data.frame)
try_(mtcars, as.list)
try_(mtcars, sample_n)
try_(mtcars, function(x) sample_n(x, 3))
try_(mtcars, function(x) sample_n(x, 0))
try_(mtcars, function(x) sample_n(x, 100))
try_(mtcars, function(x) sample_n(x, 10000))
regex_remind <- function(){
print('alpha: [[:alpha:]]')
print('alnum: [[:alnum:]]')
print('and: .*')
print('or: |')
print('escape: \\')
}
regex_remind()
huh <- regex_remind()
huh
x
regex_remind <- function(){
data.frame(
print('alpha: [[:alpha:]]')
print('alnum: [[:alnum:]]')
print('and: .*')
print('or: |')
print('escape: \\'))
}
regex_remind <- function(){
data.frame(
print('alpha: [[:alpha:]]'),
print('alnum: [[:alnum:]]'),
print('and: .*'),
print('or: |'),
print('escape: \\'))
}
huh <- regex_remind()
huh
regex_remind <- function(){
data.frame(
('alpha: [[:alpha:]]'),
('alnum: [[:alnum:]]'),
('and: .*'),
('or: |'),
('escape: \\'))
}
huh <- regex_remind()
huh
regex_remind <- function(){
data.frame(
c('alpha: [[:alpha:]]'),
c('alnum: [[:alnum:]]'),
c('and: .*'),
c('or: |'),
c('escape: \\'))
}
(huh <- regex_remind())
regex_remind <- function(){
c(
c('alpha: [[:alpha:]]'),
c('alnum: [[:alnum:]]'),
c('and: .*'),
c('or: |'),
c('escape: \\'))
}
(huh <- regex_remind())
data.frame(huh <- regex_remind())
regex_remind <- function(){
c(
('alpha: [[:alpha:]]'),
('alnum: [[:alnum:]]'),
('and: .*'),
('or: |'),
('escape: \\'))
}
data.frame(huh <- regex_remind())
regex_remind <- function(){
data.frame(
regex =c(
('alpha: [[:alpha:]]'),
('alnum: [[:alnum:]]'),
('and: .*'),
('or: |'),
('escape: \\')
)
)
}
data.frame(huh <- regex_remind())
regex_remind <- function(){
data.frame(
type = c(
'alpha',
'alnum',
'and',
'or',
'escape'
),
regex = c(
'[[:alpha:]]',
'[[:alnum:]]',
'.*',
'|',
'\\'
)
)
}
regex_remind
regexs <- function(){
data.frame(
type = c(
'alpha',
'alnum',
'and',
'or',
'escape'
),
regex = c(
'[[:alpha:]]',
'[[:alnum:]]',
'.*',
'|',
'\\'
)
)
}
regex_info <- function(){
data.frame(
type = c(
'alpha',
'alnum',
'and',
'or',
'escape'
),
regex = c(
'[[:alpha:]]',
'[[:alnum:]]',
'.*',
'|',
'\\'
)
)
}
regex_info()
data.frame(huh <- regex_remind())
data.frame(huh <- regex_info())
