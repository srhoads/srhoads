}) %>% unlist()
comparedData[[i]] %<>% setNames(comparedColNames)
comparedData[[i]]
}) %>% setNames(names(comparedData))
}
}, error = function(e) {
print(e)
RETURN0
})
RETURN
list1=list(NursesVC); list2=list(NursesVC2); exampleOfColumnName="EEID"
list1 %<>% .[sort(names(.))]
list2 %<>% .[sort(names(.))]
(BOTHLISTNAMES <- union(names(list1), names(list2)))
(MAXLISTLENGTH <- max(length(list1), length(list2)))
RETURN0 <- lapply(1:MAXLISTLENGTH, function(i){ # i <- 1
dfname_of_interest <- BOTHLISTNAMES[i]
# BOTHDATASETS <- list(OLD = list1[[i]], NEW = list2[[i]])
# BOTHDATASETS <- list(OLD = list1[[dfname_of_interest]], NEW = list2[[dfname_of_interest]])
BOTHDATASETS <- list(OLD = select_matches(list1, pat=paste0("^", dfname_of_interest, "$"), ignore.case = T) %>% flatten_list_from_top(),
NEW = select_matches(list2, pat=paste0("^", dfname_of_interest, "$"), ignore.case = T) %>% flatten_list_from_top())
MAXNROW <- BOTHDATASETS %>% purrr::map_if(is.data.frame, function(d) nrow(d)) %>% unlist() %>% max(., na.rm = T)
if(!is.nanull(exampleOfColumnName)){
BOTHDFS <- BOTHDATASETS %>%
purrr::map_if(is.data.frame, function(d){
headerRow <- grep_all_df(exampleOfColumnName, d[1:min(c(300, nrow(d))), ], rownums_only=T, ignore.case = T) %>% unique()
if(length(headerRow)>0){
headerRow %<>% .[[1]]
headerNames <- d %>% slice(headerRow) %>% unlist() %>% replace_na(., "na") %>% gsub('NA', "na", .) %>% make.unique()
d %<>% setNames(make.unique(headerNames)) %>% slice(-(1:headerRow))
}
d
})
} else {
BOTHDFS <- BOTHDATASETS
}
BOTHLISTDFNAMES <- BOTHDFS %>% purrr::map(names) %>% unlist() %>% unique()
lapply(BOTHLISTDFNAMES, function(ii){ # ii <- "lastname"      #    ii <- "gender"
ugh <- list(
hcOLD = (
BOTHDFS$OLD %>% data.frame() %>% dplyr::select(dplyr::one_of(ii)) %>% .[1:MAXNROW, ] %>% data.frame() %>%
# {if(ncol(.)==0) {.[[ii]] <- NA; .} else .} #slice(1:MAXNROW)
{if(ncol(.)>0) setNames(., paste0(ii, " (OLD)")) else .}#slice(1:MAXNROW)
),
hcNEW = (
BOTHDFS$NEW %>% data.frame() %>% dplyr::select(dplyr::one_of(ii)) %>% .[1:MAXNROW, ] %>% data.frame() %>% #setNames(paste0(ii, " (NEW)")) %>%
{if(ncol(.)>0) setNames(., paste0(ii, " (NEW)")) else .} #slice(1:MAXNROW)
)
) %>% dplyr::bind_cols() %>% sumry(., min(nrow(unique(.)), 21))
ugh
})
}) %>%
setNames(BOTHLISTNAMES)
RETURN <- tryCatch({
RETURN0 %>%
{
comparedData <- . # comparedData <- RETURN0
purrr::map(1:length(RETURN0), function(i){ # i <- 1
comparedColNames <- comparedData[[i]] %>% purrr::map(., function(x){  # x <- comparedData[[i]][[4]]
if(is.null(colnames(x))){
new_colnames0 <- paste0(F, " bc col missing from one of OR BOTH of the dfs")
} else {
new_colnames0 <- colnames(x) %>% gsub(" \\(OLD\\)|\\(NEW\\)", "", .) %>% trimws_() %>% unique() %>% .[[1]]
}
if(ncol(x)>1){
cols_identical_or_no <- identical(x[, 1], x[, 2])
} else {
cols_identical_or_no <- paste0(F, " bc col missing from one of the dfs")
}
paste0(new_colnames0, " (identical=", cols_identical_or_no, ")")
}) %>% unlist()
comparedData[[i]] %<>% setNames(comparedColNames)
comparedData[[i]]
}) %>% setNames(names(comparedData))
}
}, error = function(e) {
print(e)
RETURN0
})
RETURN
list1=list(nvc=NursesVC); list2=list(nvc=NursesVC2); exampleOfColumnName="EEID"
list1
list1 %<>% .[sort(names(.))]
list2 %<>% .[sort(names(.))]
(BOTHLISTNAMES <- union(names(list1), names(list2)))
(MAXLISTLENGTH <- max(length(list1), length(list2)))
RETURN0 <- lapply(1:MAXLISTLENGTH, function(i){ # i <- 1
dfname_of_interest <- BOTHLISTNAMES[i]
# BOTHDATASETS <- list(OLD = list1[[i]], NEW = list2[[i]])
# BOTHDATASETS <- list(OLD = list1[[dfname_of_interest]], NEW = list2[[dfname_of_interest]])
BOTHDATASETS <- list(OLD = select_matches(list1, pat=paste0("^", dfname_of_interest, "$"), ignore.case = T) %>% flatten_list_from_top(),
NEW = select_matches(list2, pat=paste0("^", dfname_of_interest, "$"), ignore.case = T) %>% flatten_list_from_top())
MAXNROW <- BOTHDATASETS %>% purrr::map_if(is.data.frame, function(d) nrow(d)) %>% unlist() %>% max(., na.rm = T)
if(!is.nanull(exampleOfColumnName)){
BOTHDFS <- BOTHDATASETS %>%
purrr::map_if(is.data.frame, function(d){
headerRow <- grep_all_df(exampleOfColumnName, d[1:min(c(300, nrow(d))), ], rownums_only=T, ignore.case = T) %>% unique()
if(length(headerRow)>0){
headerRow %<>% .[[1]]
headerNames <- d %>% slice(headerRow) %>% unlist() %>% replace_na(., "na") %>% gsub('NA', "na", .) %>% make.unique()
d %<>% setNames(make.unique(headerNames)) %>% slice(-(1:headerRow))
}
d
})
} else {
BOTHDFS <- BOTHDATASETS
}
BOTHLISTDFNAMES <- BOTHDFS %>% purrr::map(names) %>% unlist() %>% unique()
lapply(BOTHLISTDFNAMES, function(ii){ # ii <- "lastname"      #    ii <- "gender"
ugh <- list(
hcOLD = (
BOTHDFS$OLD %>% data.frame() %>% dplyr::select(dplyr::one_of(ii)) %>% .[1:MAXNROW, ] %>% data.frame() %>%
# {if(ncol(.)==0) {.[[ii]] <- NA; .} else .} #slice(1:MAXNROW)
{if(ncol(.)>0) setNames(., paste0(ii, " (OLD)")) else .}#slice(1:MAXNROW)
),
hcNEW = (
BOTHDFS$NEW %>% data.frame() %>% dplyr::select(dplyr::one_of(ii)) %>% .[1:MAXNROW, ] %>% data.frame() %>% #setNames(paste0(ii, " (NEW)")) %>%
{if(ncol(.)>0) setNames(., paste0(ii, " (NEW)")) else .} #slice(1:MAXNROW)
)
) %>% dplyr::bind_cols() %>% sumry(., min(nrow(unique(.)), 21))
ugh
})
}) %>%
setNames(BOTHLISTNAMES)
RETURN <- tryCatch({
RETURN0 %>%
{
comparedData <- . # comparedData <- RETURN0
purrr::map(1:length(RETURN0), function(i){ # i <- 1
comparedColNames <- comparedData[[i]] %>% purrr::map(., function(x){  # x <- comparedData[[i]][[4]]
if(is.null(colnames(x))){
new_colnames0 <- paste0(F, " bc col missing from one of OR BOTH of the dfs")
} else {
new_colnames0 <- colnames(x) %>% gsub(" \\(OLD\\)|\\(NEW\\)", "", .) %>% trimws_() %>% unique() %>% .[[1]]
}
if(ncol(x)>1){
cols_identical_or_no <- identical(x[, 1], x[, 2])
} else {
cols_identical_or_no <- paste0(F, " bc col missing from one of the dfs")
}
paste0(new_colnames0, " (identical=", cols_identical_or_no, ")")
}) %>% unlist()
comparedData[[i]] %<>% setNames(comparedColNames)
comparedData[[i]]
}) %>% setNames(names(comparedData))
}
}, error = function(e) {
print(e)
RETURN0
})
RETURN
l <- RETURN[[1]]
l[grep("identical=FALSE", names(l))]
l
l <- l[grep("identical=FALSE", names(l))]
l
drop_empty(l)
length(l)
drop_empty(l) %>% length()
RETURN %>% lapply(., function(l){ # l <- RETURN[[1]]
l <- l[grep("identical=FALSE", names(l))]
l <- drop_empty(l)
if(length(l)==0){
l <- "Nothing different between the columns shared by both lists of dataframes"
}
l
})
l <- RETURN[[1]]
l <- drop_empty(l)
l
list1=list(nvc=NursesVC); list2=list(nvc=NursesVC2); exampleOfColumnName="EEID"
print_only_differences=T
list1 %<>% .[sort(names(.))]
list2 %<>% .[sort(names(.))]
(BOTHLISTNAMES <- union(names(list1), names(list2)))
(MAXLISTLENGTH <- max(length(list1), length(list2)))
RETURN0 <- lapply(1:MAXLISTLENGTH, function(i){ # i <- 1
dfname_of_interest <- BOTHLISTNAMES[i]
# BOTHDATASETS <- list(OLD = list1[[i]], NEW = list2[[i]])
# BOTHDATASETS <- list(OLD = list1[[dfname_of_interest]], NEW = list2[[dfname_of_interest]])
BOTHDATASETS <- list(OLD = select_matches(list1, pat=paste0("^", dfname_of_interest, "$"), ignore.case = T) %>% flatten_list_from_top(),
NEW = select_matches(list2, pat=paste0("^", dfname_of_interest, "$"), ignore.case = T) %>% flatten_list_from_top())
MAXNROW <- BOTHDATASETS %>% purrr::map_if(is.data.frame, function(d) nrow(d)) %>% unlist() %>% max(., na.rm = T)
if(!is.nanull(exampleOfColumnName)){
BOTHDFS <- BOTHDATASETS %>%
purrr::map_if(is.data.frame, function(d){
headerRow <- grep_all_df(exampleOfColumnName, d[1:min(c(300, nrow(d))), ], rownums_only=T, ignore.case = T) %>% unique()
if(length(headerRow)>0){
headerRow %<>% .[[1]]
headerNames <- d %>% slice(headerRow) %>% unlist() %>% replace_na(., "na") %>% gsub('NA', "na", .) %>% make.unique()
d %<>% setNames(make.unique(headerNames)) %>% slice(-(1:headerRow))
}
d
})
} else {
BOTHDFS <- BOTHDATASETS
}
BOTHLISTDFNAMES <- BOTHDFS %>% purrr::map(names) %>% unlist() %>% unique()
lapply(BOTHLISTDFNAMES, function(ii){ # ii <- "lastname"      #    ii <- "gender"
ugh <- list(
hcOLD = (
BOTHDFS$OLD %>% data.frame() %>% dplyr::select(dplyr::one_of(ii)) %>% .[1:MAXNROW, ] %>% data.frame() %>%
# {if(ncol(.)==0) {.[[ii]] <- NA; .} else .} #slice(1:MAXNROW)
{if(ncol(.)>0) setNames(., paste0(ii, " (OLD)")) else .}#slice(1:MAXNROW)
),
hcNEW = (
BOTHDFS$NEW %>% data.frame() %>% dplyr::select(dplyr::one_of(ii)) %>% .[1:MAXNROW, ] %>% data.frame() %>% #setNames(paste0(ii, " (NEW)")) %>%
{if(ncol(.)>0) setNames(., paste0(ii, " (NEW)")) else .} #slice(1:MAXNROW)
)
) %>% dplyr::bind_cols() %>% sumry(., min(nrow(unique(.)), 21))
ugh
})
}) %>%
setNames(BOTHLISTNAMES)
RETURN <- tryCatch({
RETURN0 %>%
{
comparedData <- . # comparedData <- RETURN0
purrr::map(1:length(RETURN0), function(i){ # i <- 1
comparedColNames <- comparedData[[i]] %>% purrr::map(., function(x){  # x <- comparedData[[i]][[4]]
if(is.null(colnames(x))){
new_colnames0 <- paste0(F, " bc col missing from one of OR BOTH of the dfs")
} else {
new_colnames0 <- colnames(x) %>% gsub(" \\(OLD\\)|\\(NEW\\)", "", .) %>% trimws_() %>% unique() %>% .[[1]]
}
if(ncol(x)>1){
cols_identical_or_no <- identical(x[, 1], x[, 2])
} else {
cols_identical_or_no <- paste0(F, " bc col missing from one of the dfs")
}
paste0(new_colnames0, " (identical=", cols_identical_or_no, ")")
}) %>% unlist()
comparedData[[i]] %<>% setNames(comparedColNames)
comparedData[[i]]
}) %>% setNames(names(comparedData))
}
}, error = function(e) {
print(e)
RETURN0
})
if(print_only_differences){
RETURN %<>% lapply(., function(l){ # l <- RETURN[[1]]
l <- l[grep("identical=FALSE", names(l))]
l <- drop_empty(l)
if(length(l)==0){
l <- "Nothing different between the columns shared by both lists of dataframes"
}
l
})
} else {
RETURN %<>% lapply(., function(l){ # l <- RETURN[[1]]
l <- drop_empty(l)
if(length(l)==0){
l <- "Nothing different between the columns shared by both lists of dataframes"
}
l
})
}
RETURN
print_only_differences=F
list1=list(nvc=NursesVC); list2=list(nvc=NursesVC2); exampleOfColumnName="EEID"; print_only_differences=F
list1 %<>% .[sort(names(.))]
list2 %<>% .[sort(names(.))]
(BOTHLISTNAMES <- union(names(list1), names(list2)))
(MAXLISTLENGTH <- max(length(list1), length(list2)))
RETURN0 <- lapply(1:MAXLISTLENGTH, function(i){ # i <- 1
dfname_of_interest <- BOTHLISTNAMES[i]
# BOTHDATASETS <- list(OLD = list1[[i]], NEW = list2[[i]])
# BOTHDATASETS <- list(OLD = list1[[dfname_of_interest]], NEW = list2[[dfname_of_interest]])
BOTHDATASETS <- list(OLD = select_matches(list1, pat=paste0("^", dfname_of_interest, "$"), ignore.case = T) %>% flatten_list_from_top(),
NEW = select_matches(list2, pat=paste0("^", dfname_of_interest, "$"), ignore.case = T) %>% flatten_list_from_top())
MAXNROW <- BOTHDATASETS %>% purrr::map_if(is.data.frame, function(d) nrow(d)) %>% unlist() %>% max(., na.rm = T)
if(!is.nanull(exampleOfColumnName)){
BOTHDFS <- BOTHDATASETS %>%
purrr::map_if(is.data.frame, function(d){
headerRow <- grep_all_df(exampleOfColumnName, d[1:min(c(300, nrow(d))), ], rownums_only=T, ignore.case = T) %>% unique()
if(length(headerRow)>0){
headerRow %<>% .[[1]]
headerNames <- d %>% slice(headerRow) %>% unlist() %>% replace_na(., "na") %>% gsub('NA', "na", .) %>% make.unique()
d %<>% setNames(make.unique(headerNames)) %>% slice(-(1:headerRow))
}
d
})
} else {
BOTHDFS <- BOTHDATASETS
}
BOTHLISTDFNAMES <- BOTHDFS %>% purrr::map(names) %>% unlist() %>% unique()
lapply(BOTHLISTDFNAMES, function(ii){ # ii <- "lastname"      #    ii <- "gender"
ugh <- list(
hcOLD = (
BOTHDFS$OLD %>% data.frame() %>% dplyr::select(dplyr::one_of(ii)) %>% .[1:MAXNROW, ] %>% data.frame() %>%
# {if(ncol(.)==0) {.[[ii]] <- NA; .} else .} #slice(1:MAXNROW)
{if(ncol(.)>0) setNames(., paste0(ii, " (OLD)")) else .}#slice(1:MAXNROW)
),
hcNEW = (
BOTHDFS$NEW %>% data.frame() %>% dplyr::select(dplyr::one_of(ii)) %>% .[1:MAXNROW, ] %>% data.frame() %>% #setNames(paste0(ii, " (NEW)")) %>%
{if(ncol(.)>0) setNames(., paste0(ii, " (NEW)")) else .} #slice(1:MAXNROW)
)
) %>% dplyr::bind_cols() %>% sumry(., min(nrow(unique(.)), 21))
ugh
})
}) %>%
setNames(BOTHLISTNAMES)
RETURN <- tryCatch({
RETURN0 %>%
{
comparedData <- . # comparedData <- RETURN0
purrr::map(1:length(RETURN0), function(i){ # i <- 1
comparedColNames <- comparedData[[i]] %>% purrr::map(., function(x){  # x <- comparedData[[i]][[4]]
if(is.null(colnames(x))){
new_colnames0 <- paste0(F, " bc col missing from one of OR BOTH of the dfs")
} else {
new_colnames0 <- colnames(x) %>% gsub(" \\(OLD\\)|\\(NEW\\)", "", .) %>% trimws_() %>% unique() %>% .[[1]]
}
if(ncol(x)>1){
cols_identical_or_no <- identical(x[, 1], x[, 2])
} else {
cols_identical_or_no <- paste0(F, " bc col missing from one of the dfs")
}
paste0(new_colnames0, " (identical=", cols_identical_or_no, ")")
}) %>% unlist()
comparedData[[i]] %<>% setNames(comparedColNames)
comparedData[[i]]
}) %>% setNames(names(comparedData))
}
}, error = function(e) {
print(e)
RETURN0
})
if(print_only_differences){
RETURN %<>% lapply(., function(l){ # l <- RETURN[[1]]
l <- l[grep("identical=FALSE", names(l))]
l <- drop_empty(l)
if(length(l)==0){
l <- "Nothing different between the columns shared by both lists of dataframes"
}
l
})
} else {
RETURN %<>% lapply(., function(l){ # l <- RETURN[[1]]
l <- drop_empty(l)
if(length(l)==0){
l <- "Nothing different between the columns shared by both lists of dataframes"
}
l
})
}
RETURN
devtools::document() # roxygen2::roxygenise(clean = TRUE)
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
#' Samantha Rhoads's function to visualize hex color codes
#' @export
#' @examples
#' set_names_skip_rows_until_match(d, example_colname="Employee ID", check_n_rows=100)
set_names_skip_rows_until_match <- function(d, example_colname="Employee ID", check_n_rows=100){
if(!(example_colname %in% names(d))){
colnames_rownum <- grep_all_df(example_colname, d[1:check_n_rows, ], rownums_only=T)[1]
if(length(colnames_rownum)>0) d <- d %>% setNames(as.character(.[colnames_rownum, ])) %>% slice(-(1:colnames_rownum))
}
d %>% setNames(make.unique(names(.)))
}
devtools::document() # roxygen2::roxygenise(clean = TRUE)
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
pkgs <- "dplyr"
pkgstrarg <- paste0("package:", pkgs)
if(length(pkgs)==1){
detach(pkgstrarg, unload = T)
} else {
lapply(pkgstrarg, function(x)  detach(pkgstrarg, unload = T))
}
detach(pkgstrarg, unload = T)
pkgstrarg
detach(str(pkgstrarg), unload = T)
lapply(pkgstrarg, function(x)  detach(x, unload = T))
detach
detach_unload_true <- function(name, pos = 2L, unload = T, character.only = FALSE, force = FALSE) {
detach(name, pos = pos, unload = unload, character.only = character.only, force = force)
}
detach_unload_true <- function(name, pos = 2L, unload = T, character.only = FALSE, force = FALSE) {
detach(name, pos = pos, unload = unload, character.only = character.only, force = force)
}
pkgstrarg <- paste0("package:", pkgs)
pkgstrarg
# if(length(pkgs)==1){
# detach(pkgstrarg, unload = T)
# } else {
for (packagestrarg in pkgstrarg) {
do.call(detach_unload_true, list(packagestrarg))
}
detach_unload_true <- function(name, pos = 2L, unload = T, character.only = FALSE, force = FALSE) {
detach(name, pos = pos, unload = unload, character.only = character.only, force = force)
}
pkgstrarg <- paste0("package:", pkgs)
# if(length(pkgs)==1){
# detach(pkgstrarg, unload = T)
# } else {
for (packagestrarg in pkgstrarg) {
do.call(detach_unload_true, list(packagestrarg))
}
detach_package <- function(pkg, character.only = FALSE){
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
detach_package(pkgstrarg)
library(dplyr)
library(dplyr)
detach_package(pkgstrarg)
library(dplyr)
detach_package(pkgstrarg)
select
detach_package(pkgs)
select
pkgs
detach_package("dplyr")
select
detach_package("dplyr")
select
detach("package:dplyr", unload=T)
detach("package:plyr", unload=T)
library(plyr)
detach("package:plyr", unload=T)
detach("package:tidyr", unload=T)
library(tidyr)
detach("package:tidyr", unload=T)
detach("package:ggmap", unload=T)
library(ggmap)
detach("package:ggmap", unload=T)
bb2bbox
detach_package <- function(pkg, character.only = FALSE){
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
library(ggmap)
detach_package("ggmap")
bb2bbox
deparse(substitute(pkg))
detach_package <- function(pkg, character.only = T){
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
detach_package("ggmap")
bb2bbox
detach_unload_true <- function(name, pos = 2L, unload = T, character.only = T, force = FALSE) {
detach(name, pos = pos, unload = unload, character.only = character.only, force = force)
}
pkgstrarg <- paste0("package:", pkgs)
pkgstrarg
# if(length(pkgs)==1){
# detach(pkgstrarg, unload = T)
# } else {
while(pkgstrarg %in% search()){
detach(pkgstrarg, unload = TRUE, character.only = TRUE)
}
select
library(dplyr)
pkgstrarg
# if(length(pkgs)==1){
# detach(pkgstrarg, unload = T)
# } else {
while(pkgstrarg %in% search()){
detach(pkgstrarg, unload = TRUE, character.only = TRUE)
}
pkgsstrarg <- paste0("package:", pkgs)
library(srhoads)
library(ggmap)
pkgs <- c("srhoads", "ggmap")
detach_unload_true <- function(name, pos = 2L, unload = T, character.only = T, force = FALSE) {
detach(name, pos = pos, unload = unload, character.only = character.only, force = force)
}
pkgsstrarg <- paste0("package:", pkgs)
pkgsstrarg
if(length(pkgs)==1){
while(pkgsstrarg %in% search()){
detach(pkgsstrarg, unload = TRUE, character.only = TRUE)
}
} else {
lapply(pkgsstrarg, function(pkgstrarg) {
while(pkgstrarg %in% search()){
detach(pkgstrarg, unload = TRUE, character.only = TRUE)
}
})
}
getMostRecentFiles
sumry
roxygen2::roxygenise(clean = TRUE)
devtools::document() # roxygen2::roxygenise(clean = TRUE)
roxygen2::roxygenise(clean = TRUE)
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
