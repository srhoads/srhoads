mutate(group="Total")
plot3_male_cg_borg_overall <- filter(sanofi_data$headcount_data, gender == "Male") %>%
filter(date==max(date)) %>%
group_by(borg, comp_grade) %>%
summarise(N=n()) %>%
ungroup() %>%
filter(comp_grade %in% comp_grades) %>%
complete(borg, comp_grade, fill=list(N=0)) %>%
separate(borg, c("bu", "org"), sep = ":") %>%
group_by(bu, comp_grade) %>%
summarize(N = sum(N)) %>%
mutate(group="Male")
plot3_female_cg_borg_overall <- filter(sanofi_data$headcount_data, gender == "Female") %>%
filter(date==max(date)) %>%
group_by(borg, comp_grade) %>%
summarise(N=n()) %>%
ungroup() %>%
filter(comp_grade %in% comp_grades) %>%
complete(borg, comp_grade, fill=list(N=0)) %>%
separate(borg, c("bu", "org"), sep = ":") %>%
group_by(bu, comp_grade) %>%
summarize(N = sum(N)) %>%
mutate(group="Female")
plot3_nm_cg_borg_overall <- filter(sanofi_data$headcount_data, race == "POC") %>%
filter(date==max(date)) %>%
group_by(borg, comp_grade) %>%
summarise(N=n()) %>%
ungroup() %>%
filter(comp_grade %in% comp_grades) %>%
complete(borg, comp_grade, fill=list(N=0)) %>%
separate(borg, c("bu", "org"), sep = ":") %>%
group_by(bu, comp_grade) %>%
summarize(N = sum(N)) %>%
mutate(group="POC")
plot3_data_borg_overall <- bind_rows(
plot3_total_cg_borg_overall,
plot3_male_cg_borg_overall,
plot3_female_cg_borg_overall,
plot3_nm_cg_borg_overall
) %>%
rowwise() %>%
filter(sum(is.na(c(bu, comp_grade))) == 0) %>%
ungroup() %>%
mutate(vals = N) %>%
group_by(bu, group) %>%
mutate(N = N/sum(N)) %>%
ungroup() %>%
mutate(N= ifelse(is.nan(N),0,N)) %>%
mutate(pct_text=paste0(round(N * 100), "%")) %>%
mutate(hovertext = paste('Group: ', group,
'<br> Compensation Grade: ', comp_grade,
'<br> Count: ', vals,
'<br> Percent: ', paste0(round(N, 4) * 100, "%")))
plot3_total_cg_borg <- group_by(sanofi_data$headcount_data, borg, comp_grade) %>%
filter(date==max(date)) %>%
summarise(N=n()) %>%
ungroup() %>%
filter(comp_grade %in% comp_grades) %>%
complete(borg, comp_grade, fill=list(N=0)) %>%
mutate(group="Total")
plot3_male_cg_borg <- filter(sanofi_data$headcount_data, gender == "Male") %>%
filter(date==max(date)) %>%
group_by(borg, comp_grade) %>%
summarise(N=n()) %>%
ungroup() %>%
filter(comp_grade %in% comp_grades) %>%
complete(borg, comp_grade, fill=list(N=0)) %>%
mutate(group="Male")
plot3_female_cg_borg <- filter(sanofi_data$headcount_data, gender == "Female") %>%
filter(date==max(date)) %>%
group_by(borg, comp_grade) %>%
summarise(N=n()) %>%
ungroup() %>%
filter(comp_grade %in% comp_grades) %>%
complete(borg, comp_grade, fill=list(N=0)) %>%
mutate(group="Female")
plot3_nm_cg_borg <- filter(sanofi_data$headcount_data, race == "POC") %>%
filter(date==max(date)) %>%
group_by(borg, comp_grade) %>%
summarise(N=n()) %>%
ungroup() %>%
filter(comp_grade %in% comp_grades) %>%
complete(borg, comp_grade, fill=list(N=0)) %>%
mutate(group="POC")
plot3_data_borg <- bind_rows(
plot3_total_cg_borg,
plot3_male_cg_borg,
plot3_female_cg_borg,
plot3_nm_cg_borg
) %>%
rowwise() %>%
filter(sum(is.na(c(borg, comp_grade))) == 0) %>%
ungroup() %>%
mutate(vals = N) %>%
group_by(borg, group) %>%
mutate(N = N/sum(N)) %>%
ungroup() %>%
mutate(N= ifelse(is.nan(N),0,N)) %>%
mutate(pct_text=paste0(round(N * 100), "%")) %>%
mutate(hovertext = paste('Group: ', group,
'<br> Compensation Grade: ', comp_grade,
'<br> Count: ', vals,
'<br> Percent: ', paste0(round(N, 4) * 100, "%")))
#---- plot 4 data borg + borg_overall + overall
plot4_data_overall <- filter(sanofi_data$headcount_data,job_level %in% job_levels) %>%
group_by(job_level, date, gender) %>%
summarize(N=n()) %>%
ungroup() %>%
rowwise() %>%
filter(sum(is.na(c(job_level, gender))) == 0) %>%
ungroup() %>%
mutate(date = as.character(lubridate::year(date))) %>%
mutate(date = factor(date, levels = sort(unique(.$date)))) %>%
complete(job_level, gender, date, fill=list(N=0)) %>%
group_by(date, job_level) %>%
mutate(pct = N/sum(N)) %>%
ungroup() %>%
filter(gender=="Female") %>%
mutate(pct_text=paste0(round(pct * 100), "%")) %>%
mutate(hovertext = paste('Job Level: ', job_level,
'<br> Group: Female',
'<br> Count: ', N,
'<br> Percent: ', paste0(round(pct, 4) * 100, "%")))
plot4_data_borg_overall <- filter(sanofi_data$headcount_data,job_level %in% job_levels) %>%
group_by(borg, job_level, date, gender) %>%
summarize(N=n()) %>%
ungroup() %>%
rowwise() %>%
filter(sum(is.na(c(borg, job_level, gender))) == 0) %>%
ungroup() %>%
mutate(date = as.character(lubridate::year(date))) %>%
mutate(date = factor(date, levels = sort(unique(.$date)))) %>%
complete(borg, job_level, gender, date, fill=list(N=0)) %>%
separate(borg, c("bu", "org"), sep = ":") %>%
group_by(bu, job_level, gender, date) %>%
summarize(N = sum(N)) %>%
group_by(bu, date, job_level) %>%
mutate(pct = N/sum(N)) %>%
mutate(pct= ifelse(is.nan(pct),0,pct)) %>%
ungroup() %>%
filter(gender=="Female") %>%
mutate(pct_text=paste0(round(pct * 100), "%")) %>%
mutate(hovertext = paste('Job Level: ', job_level,
'<br> Group: Female',
'<br> Count: ', N,
'<br> Percent: ', paste0(round(pct, 4) * 100, "%")))
plot4_data_borg <- filter(sanofi_data$headcount_data,job_level %in% job_levels) %>%
group_by(borg, job_level, date, gender) %>%
summarize(N=n()) %>%
ungroup() %>%
rowwise() %>%
filter(sum(is.na(c(borg, job_level, gender))) == 0) %>%
ungroup() %>%
mutate(date = as.character(lubridate::year(date))) %>%
mutate(date = factor(date, levels = sort(unique(.$date)))) %>%
complete(borg, job_level, gender, date, fill=list(N=0)) %>%
group_by(borg, date, job_level) %>%
mutate(pct = N/sum(N)) %>%
mutate(pct= ifelse(is.nan(pct),0,pct)) %>%
ungroup() %>%
filter(gender=="Female") %>%
mutate(pct_text=paste0(round(pct * 100), "%")) %>%
mutate(hovertext = paste('Job Level: ', job_level,
'<br> Group: Female',
'<br> Count: ', N,
'<br> Percent: ', paste0(round(pct, 4) * 100, "%")))
#---- plot 5 data borg + borg_overall + overall
plot5_data_overall <- filter(sanofi_data$headcount_data, job_level %in% job_levels) %>%
group_by(job_level, date, race) %>%
summarize(N=n()) %>%
ungroup() %>%
rowwise() %>%
filter(sum(is.na(c(job_level, race))) == 0) %>%
ungroup() %>%
mutate(date = as.character(lubridate::year(date))) %>%
mutate(date = factor(date, levels = sort(unique(.$date)))) %>%
complete(job_level, race, date, fill=list(N=0)) %>%
group_by(date, job_level) %>%
mutate(pct = N/sum(N)) %>%
ungroup() %>%
filter(race=="POC") %>%
mutate(pct_text=paste0(round(pct * 100), "%")) %>%
mutate(hovertext = paste('Job Level: ', job_level,
'<br> Group: POC',
'<br> Count: ', N,
'<br> Percent: ', paste0(round(pct, 4) * 100, "%")))
plot5_data_borg_overall <- filter(sanofi_data$headcount_data, job_level %in% job_levels) %>%
group_by(borg, job_level, date, race) %>%
summarize(N=n()) %>%
ungroup() %>%
rowwise() %>%
filter(sum(is.na(c(borg, job_level, race))) == 0) %>%
ungroup() %>%
mutate(date = as.character(lubridate::year(date))) %>%
mutate(date = factor(date, levels = sort(unique(.$date)))) %>%
complete(borg, job_level, race, date, fill=list(N=0)) %>%
separate(borg, c("bu", "org"), sep = ":") %>%
group_by(bu, job_level, race, date) %>%
summarize(N = sum(N)) %>%
group_by(bu, date, job_level) %>%
mutate(pct = N/sum(N)) %>%
mutate(pct= ifelse(is.nan(pct),0,pct)) %>%
ungroup() %>%
filter(race=="POC") %>%
mutate(pct_text=paste0(round(pct * 100), "%")) %>%
mutate(hovertext = paste('Job Level: ', job_level,
'<br> Group: POC',
'<br> Count: ', N,
'<br> Percent: ', paste0(round(pct, 4) * 100, "%")))
plot5_data_borg <- filter(sanofi_data$headcount_data, job_level %in% job_levels) %>%
group_by(borg, job_level, date, race) %>%
summarize(N=n()) %>%
ungroup() %>%
rowwise() %>%
filter(sum(is.na(c(borg, job_level, race))) == 0) %>%
ungroup() %>%
mutate(date = as.character(lubridate::year(date))) %>%
mutate(date = factor(date, levels = sort(unique(.$date)))) %>%
complete(borg, job_level, race, date, fill=list(N=0)) %>%
group_by(borg, date, job_level) %>%
mutate(pct = N/sum(N)) %>%
mutate(pct= ifelse(is.nan(pct),0,pct)) %>%
ungroup() %>%
filter(race=="POC") %>%
mutate(pct_text=paste0(round(pct * 100), "%")) %>%
mutate(hovertext = paste('Job Level: ', job_level,
'<br> Group: POC',
'<br> Count: ', N,
'<br> Percent: ', paste0(round(pct, 4) * 100, "%")))
#---- plot 6 data borg + borg_overall + overall
plot6_data_overall <- group_by(
sanofi_data$headcount_data,
date,
age_range
) %>%
summarize(N=n()) %>%
ungroup() %>%
mutate(date = as.character(lubridate::year(date))) %>%
mutate(date = factor(date, levels = sort(unique(.$date)))) %>%
rowwise() %>%
filter(sum(is.na(c(date, age_range))) == 0) %>%
ungroup() %>%
complete(date, age_range, fill=list(N=0)) %>%
group_by(date) %>%
mutate(pct = N / sum(N)) %>%
ungroup() %>%
mutate(pct= ifelse(is.nan(pct),0,pct)) %>%
mutate(pct_text=paste0(round(pct * 100), "%")) %>%
mutate(hovertext = paste('Age Range: ', age_range,
'<br> Count: ', N,
'<br> Percent: ', paste0(round(pct, 4) * 100, "%")))
plot6_data_borg_overall <- group_by(
sanofi_data$headcount_data,
borg,
date,
age_range
) %>%
summarize(N=n()) %>%
ungroup() %>%
mutate(date = as.character(lubridate::year(date))) %>%
mutate(date = factor(date, levels = sort(unique(.$date)))) %>%
rowwise() %>%
filter(sum(is.na(c(borg, date, age_range))) == 0) %>%
ungroup() %>%
complete(borg, date, age_range, fill=list(N=0)) %>%
separate(borg, c("bu", "org"), sep = ":") %>%
group_by(bu, date, age_range) %>%
summarize(N = sum(N)) %>%
group_by(bu, date) %>%
mutate(pct = N / sum(N)) %>%
ungroup() %>%
mutate(pct= ifelse(is.nan(pct),0,pct)) %>%
mutate(pct_text=paste0(round(pct * 100), "%")) %>%
mutate(hovertext = paste('Age Range: ', age_range,
'<br> Count: ', N,
'<br> Percent: ', paste0(round(pct, 4) * 100, "%")))
plot6_data_borg <- group_by(
sanofi_data$headcount_data,
borg,
date,
age_range
) %>%
summarize(N=n()) %>%
ungroup() %>%
mutate(date = as.character(lubridate::year(date))) %>%
mutate(date = factor(date, levels = sort(unique(.$date)))) %>%
rowwise() %>%
filter(sum(is.na(c(borg, date, age_range))) == 0) %>%
ungroup() %>%
complete(borg, date, age_range, fill=list(N=0)) %>%
group_by(borg, date) %>%
mutate(pct = N / sum(N)) %>%
ungroup() %>%
mutate(pct= ifelse(is.nan(pct),0,pct)) %>%
mutate(pct_text=paste0(round(pct * 100), "%")) %>%
mutate(hovertext = paste('Age Range: ', age_range,
'<br> Count: ', N,
'<br> Percent: ', paste0(round(pct, 4) * 100, "%")))
#----
borg_list <- tibble(borg_set) %>%
separate(borg_set, c("bu", "org"), sep = ":") %>%
split(.$bu) %>%
purrr::map(function(x) c("All", setdiff(x$org, "NA")))
headcount <- readxl::read_excel(
"new_data_munge/Sanofi D&I Dashboard Files/Final Headcount and Terminations 2018_7.31.2018.xlsx",
sheet = "Headcount",
skip = 2,
col_types = c(rep("text", 156), "date", "text")
)
load("~/Documents/GitHub/sanofi/sanofi_app/plot_data_borg.RData")
library(tidyverse)
library(readxl)
kill_empty_rows <- function(data) {
data[rowSums(is.na(data)) != ncol(data), ]
}
recode_comp_grade <- function(x) {
recode(
x,
"LE1"="LE",
"LE2"="LE",
"LEXCOM"="LE",
"Local"="LL"
)
}
headcount <- readxl::read_excel(
"new_data/Sanofi D&I Dashboard Files/Final Headcount and Terminations 2018_7.31.2018.xlsx",
sheet = "Headcount",
skip = 2,
col_types = c(rep("text", 156), "date", "text")
)
gender_list <- list(
"female" = c("f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "she", "mw", "fem",
"femalenotto", "femalke", "femaleiprefernottodisclose", "femal", "felame", "femalechoosenotto", "gal", "g", "fe",
"0", "00", "000", "2", "02", "two", "female", "shef", "her", "femaile", "feamle", "femalle", "sfemalev", "femalef", "ffemale",
"ffemale", "femaleemaleale", "femnale", "woman", "girl", "femaile", "femail", "femaleemaleail", "idonotwishtoprovidethisinfofemale",
"idonotwishtoprovidethisinfomale", "femalefemale", "queerfem", "transfemale", "transwoman", "mtf"),
"male" = c("m", "m", "m", "m", "m", "m", "m", "male", "him", "hismale", "mail", "christopher", "chris", "michael", "fsbm", "mfale", "mlae", "mike",
"dude", "guy", "malenotto", "maleiprefernottodisclose", "malechoosenotto", "femaletomaletrans",
"maley", "mae", "he", "his", "tospecifemaley", "amle", "maile", "mal", "smalev", "malem", "malevisual",
"mmale", "maleale", "mm", "1", "01", "one", "make", "man", "boy", "malemale", "maleundisclosed",
"malequeer fluid", "malequeerfluid", "gayman", "transmale", "maleiamtransftm", "transedftm", "ftm"),
"NA" = c("a", "a", "a", "a", "a", "a", "NA", "google", "preferrednotto", "careerbuilder", "simplyhired", "linkedin", "torespond", "monster", "indeedcom", "indeed", "fulltime", "screened", "not", "interviewdate", "notcollected", "notthisquestion", "asion", "african", "ss", "hispanic", "cd", "cm", "ni",
"candidatetakethesteps", "uknown", "report", "ormoreraces", "notto", "notsupplied", "notselected",
"notgiven", "notentered", "noinformation", "noident", "no", "hispanicother", "hispaniclatino",
"followstepstocompleteeeoinformation", "donot", "caucasian", "black", "asianpacificislander", "asianother", "asianindian", "ai", "active",
"aa", "mf", "twoormore", "t", "o", "iidentifyasqueerandprefertheytheirpronouns", "nonbinary", "nonconforming", "queer", "na", "to", "blanj", "ua",
"hire", "whitenothispanicorlatino", "ormoreracesnothispanicorlatino", "ormoreraces", "nativehawaiianorotherpacificislandernothispanicorlatino", "blackorafricanamericannothispanicorlatino",
"americanindianoralaskanativenothispanicorlatino", "asiannothispanicorlatino", "column", "ud", "to", "or", "key", "latino",
"mixed", "server", "un", "tw", "whiteunitedstatesofamerica", "to", "sv", "pacificisland", "ndg", "r", "black", "ormore",
"cr", "c", "dept", "el", "it", "mc", "twoormore", "wr", "amind", "s", "hours", "ftpt", "ar", "cs", "e",
"p", "i", "d", "race", "br", "desc", "gmus", "queertrans", "trans", "transed", "transedqueerly", "name", "namelf", "white", "asian",
"americanindianoralaskanative", "americanindianalaskannative", "twoormoreraces", "blackorafricanamerican",
"hispanicorlatino", "nativehawaiianorotherpacificislander", "n", "i", "b", "malefemale", "femalemale",
"whiteapersonhavingoriginsinanyoftheoriginalpeoplesofeuropethemiddleeastornorthafrica", "twoormoreracesallpersonswhoidentifywithmorethanoneoftheaboveraces",
"nativehawaiianorotherpacificislanderapersonhavingoriginsinanyoftheoriginalpeoplesofhawaiiguamsamoaorotherpacificislands",
"blackorafricanamericanapersonhavingoriginsinanyoftheblackracialgroupsofafrica",
"asianapersonhavingoriginsinanyoftheoriginalpeoplesofthefareastsoutheastasiaortheindiansubcontinentincludingforexamplecambodiachinaindiajapankoreamalaysiapakistanthephilippineislandsthailandandvietnam",
"americanindianoralaskanativeapersonhavingoriginsinanyoftheoriginalpeoplesofnorthandsouthamericaincludingcentralamericaandwhomaintainstribalaffiliationorcommunityattachment",
"no", "ns", "q", "o", "blank", "8", "9", "10", "11", "g", "l", "w", "p", "h", "0", " ", "u", "x", "null", "unk")
)
summary(xls_15kto19013 %>% select(gender, race), maxsum = 150)
source("~/Documents/GitHub/aapdata/AA/code/functions.R")
library(tidyverse)
summary(xls_15kto19013 <- feather::read_feather("~/Documents/GitHub/aapdata/AA/data/process3/xls_15k-19013.f"), maxsum = 100)
summary(xls_15kto19013 %>% select(gender, race), maxsum = 150)
summary(xls_10kto15k <- feather::read_feather("~/Documents/GitHub/aapdata/AA/data/process3/xls_10k-15k.f"), maxsum = 100)
summary(xls_10kto15k %>% select(gender, race), maxsum = 150)
summary(xls_5kto10k <- feather::read_feather("~/Documents/GitHub/aapdata/AA/data/process3/xls_5k-10k.f"), maxsum = 100)
summary(xls_5kto10k %>% select(gender, race), maxsum = 150)
summary(xls_1to5k %>% select(gender, race), maxsum = 150)
summary(xls_1to5k <- feather::read_feather("~/Documents/GitHub/aapdata/AA/data/process3/xls_1-5k.f"), maxsum = 100)
summary(xls_1to5k %>% select(gender, race), maxsum = 150)
summary(xls_1to5k %>% select(gender, race), maxsum = 50)
summary(xls_5kto10k %>% select(gender, race), maxsum = 50)
summary(xls_10kto15k %>% select(gender, race), maxsum = 50)
summary(xls_15kto19013 %>% select(gender, race), maxsum = 50)
xls0 <- feather::read_feather("~/Documents/GitHub/aapdata/AA/data/process3/preprocessed_xls_1-5k.f")
xls0_a <- xls0[1:500000, ]
xls0_a1 <- gather_gender(xls0_a) %>% gather_race(.)
xls0_b <- xls0[500001 : 1000000, ]
xls0_b1 <- gather_gender(xls0_b) %>% gather_race(.)
xls0_c <- xls0[1000001 : 1500000, ]
xls0_c1 <- gather_gender(xls0_c) %>% gather_race(.)
xls0_d <- xls0[1500001 : 2000000, ]
xls0_d1 <- gather_gender(xls0_d) %>% gather_race(.)
xls0_e <- xls0[2000001 : 2500000, ]
xls0_e1 <- gather_gender(xls0_e) %>% gather_race(.)
xls0_f <- xls0[2500001 : nrow(xls0), ]
xls0_f1 <- gather_gender(xls0_f) %>% gather_race(.)
source("~/Documents/GitHub/aapdata/AA/code/functions.R")
xls0_a1 <- gather_gender(xls0_a) %>% gather_race(.)
source("~/Documents/GitHub/aapdata/AA/code/functions.R")
xls0_a1 <- gather_gender(xls0_a) %>% gather_race(.)
xls0_b <- xls0[500001 : 1000000, ]
xls0_b1 <- gather_gender(xls0_b) %>% gather_race(.)
xls0_c <- xls0[1000001 : 1500000, ]
xls0_c1 <- gather_gender(xls0_c) %>% gather_race(.)
xls0_d <- xls0[1500001 : 2000000, ]
xls0_d1 <- gather_gender(xls0_d) %>% gather_race(.)
xls0_e <- xls0[2000001 : 2500000, ]
xls0_e1 <- gather_gender(xls0_e) %>% gather_race(.)
xls0_f <- xls0[2500001 : nrow(xls0), ]
xls0_f1 <- gather_gender(xls0_f) %>% gather_race(.)
??compact
?compact
?plyr::compact
# by 10s
seq(1, 100, 10)
# by 10s
seq(0, 100, 10)
seq(0, 100, 10) - 9
seq(0, 100, 10) + 1
# by 10s
s1 <- seq(0, 100, 10)
lapply(
s1,
function (x) {
start <- x + 1
end <- x + 10
paste0(start, ":", end)
}
)
# by 10s
s1 <- seq(0, 90, 10)
seq(0, 90, 10) + 10
seq(0, 90, 10) + 1
lapply(
s1,
function (x) {
start <- x + 1
end <- x + 10
paste0(start, ":", end)
}
)
#source("~/Documents/GitHub/aapdata/AA/code/functions.R")
source("AA/code/functions.R")
#------------
summary(xls0 <- feather::read_feather("~/Documents/GitHub/aapdata/AA/data/process3/preprocessed_xls_1-5k.f"), maxsum = 50)
#------------
summary(xls0 <- feather::read_feather("AA/data/process3/preprocessed_xls_1-5k.f"), maxsum = 50)
gather_race_gender <- function(df) {
library(tidyverse)
df <- df %>% select(-contains("id")) %>%
gather("twas", "race", contains("race")) %>% select(-twas) %>% dplyr::distinct()
df <- df %>% select(-contains("id")) %>%
gather("twas", "gender", contains("gender")) %>% select(-twas) %>%
lapply(stringi::stri_enc_toutf8) %>% data.frame() %>% dplyr::distinct()
df
}
manymultistep_gather_race_gender <- function(mylist, subsets = 6) {
(by <- round(length(mylist) / subsets))
lapply(seq(1, (length(mylist)), by),
function (x) {
start <- x
end <- x + (by - 1)
diff <- end - length(mylist)
end <- ifelse(diff <= 0, end, end - diff)
gather_race_gender(mylist[start:end])
}
) %>%
bind_rows() %>%
lapply(., as.factor) %>%
data.frame()
}
multistep_gather_race_gender <- function(mylist, subsets = 4, subsubsets = 6, featherpath = "~/") {
(by <- round(length(mylist) / subsets))
library(dplyr)
lapply(seq(1, (length(mylist)), by),
function (x) {
start <- x
end <- x + (by - 1)
diff <- end - length(mylist)
end <- ifelse(diff <= 0, end, end - diff)
feather::write_feather((stuff <- manymultistep_gather_race_gender(mylist[start:end], subsets = subsubsets)),
paste0(featherpath, "block", start, "to", end, ".f"))
}
)  %>%
bind_rows() %>%
lapply(., as.factor) %>%
data.frame()
}
source("functions.r")
install.packages("devtools")
devtools::install("~/github/impactreportr")
install.packages("plotly")
install.packages("DT")
install.packages("htmlwidgets")
getwd()
install('srhoads')
devtools::install_github('srhoads/srhoads')
srhoads::alnum("sdljfhds")
1000-170
1000-130
2250/1000
830*2.25
1000-130-170
520+2.25
520*2.25
480*2.25
1080+1170
1170+1080
setwd('srhoads')
setwd('./srhoads')
setwd('./GitHub/srhoads')
document()
library(devtools)
document()
document()
document()
document()
document()
document()
