lastname_after_space_when_nocomma=lastname_after_space_when_nocomma(name)
)
df
}
#' A Function
#'
#' This function allows you to
#' @export
#' @examples
#' ()
gather_namesplit <- function(df){
df %<>%
namesplit() %>%
gather_first_last_name() %>%
dplyr::distinct()
df
}
#' A Function
#'
#' This function allows you to
#' @export
#' @examples
#' ()
gather_namesplit_clean <- function(df){
df %<>% lapply(., function(x){
x <- stringi::stri_enc_toutf8(x) %>%
gsub("_", " ", .) %>%
gsub("[^,|\\.| |\\-|-|[:alpha:]]", "", .) %>%
trimws(., which="both") %>%
as.character() %>%
tolower() %>%
gsub(",", ", ", .) %>%
gsub("  ", " ", .) %>%
gsub("^jr$|^jr\\.$|jr\\.,| jr\\.| jr$| jr |,jr$|,jr\\.|,jr |^jr\\. ", "junior", .) %>%
trimws()
x
}) %>% data.frame(., stringsAsFactors = F) %>%
clean_recode() %>%
gather_namesplit() %>%
recode_races_and_genders() %>%
dplyr::mutate(gender=as.factor(recode_gender_specific(gender))) %>%
dplyr::distinct() %>%
lapply(., function (x) {
x %<>%
gsub("^phd$|^rn$|^md$", "", .) %>%
gsub("^jr$|^jr\\.$|jr\\.,| jr\\.| jr$| jr |,jr$|,jr\\.|,jr |^jr\\. ", "junior", .) %>%
na_if(., "") %>%
as.factor()
x
}) %>%
data.frame() %>%
dplyr::distinct()
df
}
#--------------------------------------------------------------
#' A Function
#'
#' This function allows you to
#' @export
#' @examples
#' ()
samtokens <- function(df, nmin=2,nmax=3,
xv='firstname',
yv='gender',
sample=nrow(df)){
df$x <- df[[xv]]
df$y <- df[[yv]]
df %<>%
sample_n(., sample) %>%
select(x, y) %>%
na.omit() %>%
dplyr::distinct() %>%
dplyr::mutate(id=paste0("doc", 1:nrow(.)),
y=as.factor(as.numeric(as.factor(y))),
x = x %>%
trimws(., which="both") %>%
paste0(" ", ., " ")
) %>% dplyr::distinct()
df$x %<>%
quanteda::tokens(., ngrams=nmin:nmax,
what="character",
remove_separators=F,
concatenator = "") %>%
lapply(., function(x) {
x <- gsub(" ", "_", x)
x <- paste0(x, collapse=" ")
}) %>% data.frame(., stringsAsFactors = F) %>% t() %>%
.[,1] %>% as.character()%>% unlist()
return(df)
}
#' A Function
#'
#' This function allows you to
#' @export
#' @examples
#' ()
dtmfunc <- function(df=d, corp=df$x, id=df$id, term_count_min=2){
it = text2vec::itoken(as.character(corp),
tokenizer = text2vec::word_tokenizer,
ids = id)
vocab <- text2vec::create_vocabulary(it) %>%
text2vec::prune_vocabulary(., term_count_min=term_count_min)
vectorizer = text2vec::vocab_vectorizer(vocab)
dtm_all = text2vec::create_dtm(it, vectorizer)
dtm_all
}
#' A Function
#'
#' This function allows you to
#' @export
#' @examples
#' ()
tokdtmfunc <- function(df=fgsam, xv='firstname', yv='gender', nmin=2,nmax=3,term_count_min=2){
d <- samtokens(df=df, xv=xv, yv=yv, nmin=nmin, nmax=nmax)
dtm_all <- dtmfunc(df=d, corp=d$x, id=d$id, term_count_min=term_count_min)
list("dtm"=dtm_all, "df"=d)
}
#' A Function
#'
#' This function allows you to
#' @export
#' @examples
#' cvglmnet()
cvglmnet <- function(x = dtm_all, y = d$y,
family = 'binomial', alpha = 0,
type.measure = "auc", nfolds = 5,
thresh = 1e-3, maxit = 1e3){
m <- glmnet::cv.glmnet(x=x, y=y,
family=family, alpha=alpha,
type.measure=type.measure,
nfolds=nfolds, thresh=thresh,
maxit=maxit)
# print(paste("max AUC =", round(max(m$cvm), 4)))
print(paste("mean AUC =", round(mean(m$cvm), 4)))
print("     ")
return(list(m, plot(m)))
# print(plot(m))
}
#' A Function
#'
#' This function allows you to
#' @export
#' @examples
#' ()
tok_cvglmnet <- function(df=fgsam, xv='firstname', yv='gender', nmin=2,nmax=3,term_count_min=2,
family = 'binomial', alpha = 0,
type.measure = "auc", nfolds = 5,
thresh = 1e-3, maxit = 1e3){
xy <- tokdtmfunc(df=df, xv=xv, yv=yv, nmin=nmin,nmax=nmax,term_count_min=term_count_min)
mod <- cvglmnet(x = xy$dtm, y = xy$df$y,
family = family, alpha = alpha,
type.measure = type.measure, nfolds = nfolds,
thresh = thresh, maxit = maxit)
}
#' A function that makes sample data frames with name, race, gender type columns
#'
#' This function allows you to make sample dataframes!
#' @export
#' @examples
#' dfsampler(which='long', tibble=F)
dfsampler <- dfincaser <- dfincasef <- function(which='long', tibble=F){
if(which=='short') dfincase <- data.frame(name=c('charlene teters', 'sandra sunrising osawa'),
firstname=c('charlene', 'sandra sunrising'),
lastname=c('teters', 'osawa'),
gender=c('female', 'female'),
race=c('american indian or alaska native', 'american indian or alaska native'),
stringsAsFactors = F)
if(which=='long') dfincase <- data.frame(gender = c("male", "female", "female",
"female", "female", "female",
"male", "female", "male",
"male", "male", "male",
"female", "female", "female",
"female", "female", "female",
"female", "female", "male",
"male"),
race = c("white", "white",
"native hawaiian or other pacific islander",
"black or african american",
"american indian or alaska native",
"hispanic or latino",
"asian",
"black or african american",
"american indian or alaska native",
"white",
"two or more races", "two or more races",
"american indian or alaska native",
"american indian or alaska native",
"native hawaiian or other pacific islander",
"hispanic or latino",
"hispanic or latino",
"white", "white",
"hispanic or latino",
"hispanic or latino",
"native hawaiian or other pacific islander"),
name = c("jason o'rawe", "samantha karlaina rhoads", "keisha castle-hughes",
"oprah winfrey", "shoni schimmel", "alexandria ocasio-cortez",
"kendrick kang-joh jeong","purdie greenaway, valerie", "silverheels, jay",
"jadrian charles guy", "jordan peele", "keegan-michael key",
"davids, sharice", "deb haaland", "dinah jane hansen",
"ochoa, ellen", "sonia sotomayor", "ruth bader ginsburg",
"natalia nikolaevna zakharenko", "kahlo, frida", "diego rivera",
"momoa, jason"), stringsAsFactors = F)
if(tibble) dfincase <- as.tibble(dfincase)
dfincase
}
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' trimws_v()
trimws_v <- function(v, which='both', doublespace=T) if(doublespace) gsub('   |  ', ' ', trimws(v, which=which)) else trimws(v, which=which)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' trimws_()
trimws_ <- function(v, which='both', doublespace=T) if(doublespace) gsub('   |  ', ' ', trimws(v, which=which)) else trimws(v, which=which)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' trimws_df()
trimws_df <- function(x, which='both', doublespace=T) mutate_all(x, function(v) trimws_v(v, doublespace=doublespace, which=which))
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' na_if_()
na_if_ <- function(x) x %>% na_if('') %>% na_if('NA') %>% na_if('Unknown') %>% na_if('-') %>% na_if('.') %>% na_if(' ') %>% na_if('na') %>% na_if('/') %>% na_if(',') %>% na_if(';') %>%
na_if('  ') %>% na_if('Not Available') %>% na_if('not available') %>% na_if('Not Applicable') %>% na_if('not applicable') %>% na_if('No Response') %>% na_if('NULL') %>% na_if('null') %>%
na_if('unknown') %>% na_if('N/A') %>% na_if('n/a') %>% na_if('<NA>') %>% na_if('<N/A>') %>% na_if('Na') %>% na_if('') %>% na_if('') %>% na_if('')
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' newdate()
newdate <- function(v) lubridate::mdy_hm(v) %>% lubridate::date()
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' unique_sep()
unique_sep <- function(v, sep='; '){
splitv <- strsplit(v, sep)
uniqv <- lapply(splitv, unique)
lapply(uniqv, function(s) paste0(s, collapse=sep)) %>% dplyr::combine() %>% as.character()
}
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' format_initial()
format_initial <- function(v, upper=T){
v <- gsub("\\s([[:alpha:]])\\s"," \\1. ", v)
v <- gsub("^([[:alpha:]])\\s","\\1. ", v)
v <- gsub("\\s([[:alpha:]])$"," \\1.", v)
v <- gsub("^([[:alpha:]])$","\\1.", v)
v <- trimws_(gsub('\\.', '. ', v))
if(upper) v <- gsub("\\b(\\w)", "\\U\\1", v, perl = TRUE)
trimws_(v)
}
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' toupper_l1()
toupper_l1 <- function(v) gsub("\\b(\\w)", "\\U\\1", v, perl = TRUE)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' name_case()
name_case <- function(v) toupper_l1(tolower(v))
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' clean_str()
clean_str <- function(v){
v %>% trimws_() %>%
gsub(',', ', ', .) %>%
trimws_() %>%
gsub(' \\.$|\\-$|\\_$|\\,$|\\/$', '', .) %>%
gsub('^\\.|^\\-|^\\_|^\\,|^\\/', '', .) %>%
# gsub(' \\. ', ' ', .) %>%
trimws
}
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' format_pasted_name()
format_pasted_name <- function(name){
name <- trimws_(gsub(' NA|NA ', '', name))
name <- clean_str(name)
name <- format_initial(name)
name <- gsub(' Na ', ' ', name)
name <- name_case(name)
name <- trimws_(name)
name <- unique_sep(name, ' ')
name
}
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' remove_after_char()
remove_after_char <- function(v, sep=' ') gsub(paste0(sep, ".*"),"", v)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' extract_words_w_nums()
extract_words_w_nums <- function(v) sapply(stringr::str_extract_all(v, '[A-Za-z]*[0-9]+[A-Za-z]*'), paste, collapse=' ')
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' na_if_all_digits()
na_if_all_digits <- function(v) gsub(paste_regex(c(1:2000), exact=T), NA, v, ignore.case = T)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' join_full()
join_full <- function(l, type='full') plyr::join_all(l, type=type)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' datatable_()
datatable_ <- function(d){
DT::datatable(d, rownames=F,
options = list(pageLength = 5000,
autoWidth = TRUE,
dom = 'Bfrtip',
autoWidth=T,
columnDefs = list(list(width = '10', targets = 2)),
scrollX = TRUE,
selection="multiple"))
}
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' df_to_vec()
df_to_vec <- function(df) as.character(unlist(df))
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' ifelse_to_na_exact()
ifelse_to_na_exact <- function(v, na_vec) ifelse(tolower(v) %in% tolower(na_vec), NA, v)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' ifelse_to_na_partial()
ifelse_to_na_partial <- function(v, na_vec) ifelse(grepl(paste_regex(na_vec), v), NA, v)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' ifelse_to_na()
ifelse_to_na <- function(v, na_vec, exact=T) if(exact) ifelse_to_na_exact(v, na_vec) else ifelse_to_na_partial(v, na_vec)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' unlist_as_char()
unlist_as_char <- function(df) as.character(unlist(df))
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' sort_df_columns()
sort_df_columns <- function(df) df %>% dplyr::select(sort(names(.)))
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' summary_factor()
summary_factor <- function(x, maxsum=7) if(is.data.frame(x)) summary(dplyr::mutate_all(x, as.factor), maxsum) else summary(as.factor(x), maxsum)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' paste_regex_partial()
paste_regex_partial <- function(v, collapse='|') paste0(v, collapse=collapse)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' paste_regex_exact()
paste_regex_exact <- function(v, collapse='|') paste0('^', v, '$', collapse=collapse)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' paste_regex()
paste_regex <- function(v, collapse='|', exact=F){
if(exact) paste_regex_exact(v)
else paste_regex_partial(v)
}
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' strip_num_trimws()
strip_num_trimws <- function(v) trimws_(gsub('[[:digit:]]+', '', v))
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' clean_na_sep()
clean_na_sep <- function(v, sep='///') trimws_(gsub('///NA|NA///|^///|///$|^///|///$|^\\///|\\///$', '', trimws_(v), perl=T)) %>%
gsub(' ///|/// |//////', '///', ., perl=T) %>%
trimws_() %>% na_if_()
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' clean_na_sep_comma()
clean_na_sep_comma <- function(v, sep=', ') trimws_(gsub(', NA|NA, |^, |, $|^, |, $|^\\, |\\, $', '', trimws_(v), perl=T)) %>%
gsub(' , |,  |, , ', ', ', ., perl=T) %>%
trimws_() %>% na_if_()
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' clean_unique_sep()
clean_unique_sep <- function(v, sep='///') trimws_(gsub('///NA|NA///|^///|///$|^///|///$|^\\///|\\///$', '', v, perl=T)) %>%
gsub(' ///|/// |//////', '///', ., perl=T) %>%
unique_sep(., sep=sep) %>% na_if_()
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' ()
unique_sep_strip_num_clean <- function(v, sep='///') clean_unique_sep(unique_sep(strip_num_trimws(v), sep=sep), sep=sep)
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' drop_rows_all_na()
drop_rows_all_na <- function(x, pct=1) x[!rowSums(is.na(x)) >= ncol(x)*pct,]
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' nna()
nna <- function(x) sum(is.na(x))
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' dimnna()
dimnna <- nnadim <- function(d) paste0("nNA: ", nna(d), "  |  dim: ", paste0(dim(d), collapse=' x '), collapse=' ')
#' A function
#'
#' This function allows you to
#' @export
#' @examples
#' nnadimsum()
nnadimsum <- dimsumnna <- sumdimnna <- dimnnasum <- sumnnadim <- function(d, alpha=F){
if(alpha) print(summary_factor(d %>% sort_df_columns(), 1)) else print(summary_factor(d, 1))
cat(paste0("\n\nnNA: ", nna(d), "\n nrow: ", paste0(dim(d), collapse=' \n ncol: '), collapse=' '))
}
print("yey u loaded sam's fxns!")
devtools::install_github('srhoads/srhoads')
devtools::document()
devtools::document()
devtools::install_github('srhoads/srhoads')
devtools::document()
devtools::document()
devtools::install_github('srhoads/srhoads')
devtools::document()
devtools::install_github('srhoads/srhoads')
