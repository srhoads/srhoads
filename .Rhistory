"Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts",
"Michigan", "Minnesota", "Mississippi", "Missouri", "Montana",
"Nebraska", "Nevada", "New Hampshire", "New Jersey",
"New Mexico", "New York", "North Carolina", "North Dakota",
"Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island",
"South Carolina", "South Dakota", "Tennessee", "Texas",
"California", "Vermont", "Virginia", "Washington", "West Virginia",
"Wisconsin", "Wyoming", "District of Columbia")
state.abb <- c("AL", "AK", "AZ", "KS", "UT", "CO", "CT",
"DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "AR",
"KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO",
"MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
"OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"CA", "VT", "VA", "WA", "WV", "WI", "WY", "DC")
(statenameabbpasteddf <- data.frame(statenameabbpasted = paste0(state.name, "; -- ", state.abb),
state.name_new = state.name, stringsAsFactors=F))
(vecd <- data.frame(statenameabbpasted=vec, vec=vec, stringsAsFactors=F))
(vec <- left_join(vecd, statenameabbpasteddf) %>%
mutate(statenameabbpasted = ifelse(is.na(state.name_new), statenameabbpasted, state.name_new)) %>%
.$statenameabbpasted)
(newabb <- statetoabb(vec))
(newst <- abbtostate(vec))
newnewst <- abbtostate(newabb)
vec <- ifelse(is.na(newst), newnewst, newst) %>% ifelse(is.na(.), as.character(vec), .)
if(!abb) vec
else statetoabb(vec)
}
state2abbr_or_abbr2state("New York")
state2abbr_or_abbr2state("New York", abb=T)
vec <- c("New York", "NY", "N.Y.", "new, york", "ny,")
state2abbr_or_abbr2state(vec, abb=T)
vec <- c("New York", "NY", "N.Y.", "new, york", "ny,", "kjlshfd")
state2abbr_or_abbr2state(vec, abb=T)
statetoabb(vec)
abb2state(vec)
abbtostate(vec)
statetoabb(vec)
abbtostate(vec)
statetoabb(vec) %>% abbtostate()
abbtostate(vec)
ifelse(is.na(st1), st2, st1)
st1 <- statetoabb(vec) %>% abbtostate()
st2 <- abbtostate(vec)
ifelse(is.na(st1), st2, st1)
state2abb_or_abb2state <- function(v, abb=F){
st1 <- statetoabb(vec) %>% abbtostate()
st2 <- abbtostate(vec)
if(!abb) ifelse(is.na(st1), st2, st1) else statetoabb(ifelse(is.na(st1), st2, st1))
}
state2abb_or_abb2state(vec, abb=T)
state2abb_or_abb2state(vec, abb=F)
state2abb_or_abb2state <- function(v, abb=F){
st1 <- statetoabb(vec) %>% abbtostate()
st2 <- abbtostate(vec)
if(!abb) ifelse(is.na(st1), st2, st1) else statetoabb(ifelse(is.na(st1), st2, st1))
}
(v_abbr <- state2abb_or_abb2state(v_abbr, abb=T))
v_abbr <- c("New York", "ny", "n.y,")
state2abb_or_abb2state(v_abbr, abb=T)
state2abb_or_abb2state <- function(v, abb=F){
st1 <- statetoabb(v) %>% abbtostate()
st2 <- abbtostate(v)
if(!abb) ifelse(is.na(st1), st2, st1) else statetoabb(ifelse(is.na(st1), st2, st1))
}
state2abb_or_abb2state(v_abbr, abb=T)
state2abb_or_abb2state(v_abbr
)
(v_abbr <- state2abb_or_abb2state(v_abbr, abb=T))
state.region
regdf <- tibble(c(state.region), state.abb= tolower(state.abb)) %>% left_join(vdf, .)
state2region <- function(v_abbr){
(v_abbr <- state2abb_or_abb2state(v_abbr, abb=T))
vdf <- tibble(state.abb = tolower(v_abbr))
regdf <- tibble(c(state.region), state.abb= tolower(state.abb)) %>% left_join(vdf, .)
regdf$state.region[grepl("vt|dc", regdf$state.abb)] <- "Northeast"
regdf$state.region[grepl("pr|gu|nmari", regdf$state.abb)] <- "Other"
regdf$state.region
}
state2region(v_abbr="NY")
state.region <- structure(c(2L, 4L, 4L, 2L, 4L, 4L, 1L, 2L, 2L, 2L, 4L, 4L, 3L,
3L, 3L, 3L, 2L, 2L, 1L, 2L, 1L, 3L, 3L, 2L, 3L, 4L, 3L, 4L, 1L,
1L, 4L, 1L, 2L, 3L, 3L, 2L, 4L, 1L, 1L, 2L, 3L, 2L, 2L, 4L, 1L,
2L, 4L, 2L, 3L, 4L), .Label = c("Northeast", "South", "North Central",
"West"), class = "factor")
c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA",
"HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA",
"MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY",
"NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"UT", "VT", "VA", "WA", "WV", "WI", "WY") -> state.abb
state.name <- c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado",
"Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho",
"Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana",
"Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota",
"Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire",
"New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota",
"Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island",
"South Carolina", "South Dakota", "Tennessee", "Texas", "Utah",
"Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin",
"Wyoming")
(v_abbr <- state2abb_or_abb2state(v_abbr, abb=T))
vdf <- tibble(state.abb = tolower(v_abbr))
regdf <- tibble(c(state.region), state.abb= tolower(state.abb)) %>% left_join(vdf, .)
(regdf <- tibble(c(state.region), state.abb= tolower(state.abb)) %>% left_join(vdf, .))
regdf$state.region[grepl("vt|dc", regdf$state.abb)] <- "Northeast"
regdf$state.region[grepl("pr|gu|nmari", regdf$state.abb)] <- "Other"
regdf$state.region
vdf
tibble(c(state.region), state.abb= tolower(state.abb))
state.region
(regdf <- tibble(state.region=c(state.region), state.abb= tolower(state.abb)) %>% left_join(vdf, .))
state.region=c(state.region)
state.region
state.region <- structure(c(2L, 4L, 4L, 2L, 4L, 4L, 1L, 2L, 2L, 2L, 4L, 4L, 3L,
3L, 3L, 3L, 2L, 2L, 1L, 2L, 1L, 3L, 3L, 2L, 3L, 4L, 3L, 4L, 1L,
1L, 4L, 1L, 2L, 3L, 3L, 2L, 4L, 1L, 1L, 2L, 3L, 2L, 2L, 4L, 1L,
2L, 4L, 2L, 3L, 4L), .Label = c("Northeast", "South", "North Central",
"West"), class = "factor")
(regdf <- tibble(state.region=as.character(state.region), state.abb= tolower(state.abb)) %>% left_join(vdf, .))
regdf$state.region[grepl("vt|dc", regdf$state.abb)] <- "Northeast"
regdf$state.region[grepl("pr|gu|nmari", regdf$state.abb)] <- "Other"
regdf$state.region
(v_abbr <- state2abb_or_abb2state(v_abbr, abb=T))
vdf <- tibble(state.abb = tolower(v_abbr))
(regdf <- tibble(state.region=as.character(state.region), state.abb= tolower(state.abb)) %>% left_join(vdf, .))
regdf$state.region[grepl("vt|dc", regdf$state.abb)] <- "Northeast"
regdf$state.region[grepl("pr|gu|nmari", regdf$state.abb)] <- "Other"
regdf$state.region
state2region <- function(v_abbr){
(v_abbr <- state2abb_or_abb2state(v_abbr, abb=T))
vdf <- tibble(state.abb = tolower(v_abbr))
(regdf <- tibble(state.region=as.character(state.region), state.abb= tolower(state.abb)) %>% left_join(vdf, .))
regdf$state.region[grepl("vt|dc", regdf$state.abb)] <- "Northeast"
regdf$state.region[grepl("pr|gu|nmari", regdf$state.abb)] <- "Other"
regdf$state.region
}
state2region(v_abbr="NY")
state2region(v_abbr="dc")
state2region(v_abbr="d.c.")
state2region(v_abbr="d.c.")
docu
docu()
redocument=T
if(redocument){
devtools::document()
system('git add -A && git commit -m "_"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
}
devtools::document()
system('git add -A && git commit -m "_"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
# July 9, 2019 (07092019) _ ########################################################################################################################
docu()
library(srhoads)
# July 9, 2019 (07092019) _ ########################################################################################################################
docu()
#' Samantha Rhoads's function to split a string between a lowercase and capital letter, as long as the letter after the uppercase one is a lowercase letter
#'
#' Srhoads wrote this to allow you to split a string between a lowercase and capital letter, as long as the letter after the uppercase one is a lowercase letter (loosly means you don't need the letter after the capital letter to be lowercase)
#' @export
#' @examples
#' split_before_capital()
split_before_capital <- function(x, sep=" ", loosly=F) if(!loosly) gsub('([[:lower:]])([[:upper:]])([[:lower:]])', paste0('\\1', sep, '\\2\\3'), x) else gsub('([[:lower:]])([[:upper:]])', paste0('\\1', sep, '\\2'), x)
devtools::document()
system('git add -A && git commit -m "_"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
devtools::document()
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
devtools::install_github('srhoads/srhoads', force=T)
library(srhoads)
srhoads::col_types
srhoads::pkg2
devtools::document()
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
srhoads::pkg3
srhoads::pkg2
devtools::document()
system('git add -A && git commit -m "new functions added/edited the pkg2 issue, plus pkg3 now, trying to switch changing pkg2 to pkg_old and then pkg3 to pkg2"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
devtools::document()
system('git add -A && git commit -m "new functions added/edited the pkg2 issue, plus pkg3 now, trying to switch changing pkg2 to pkg_old and then pkg3 to pkg2.evenmore issues. using pkg4 now and NO pkg2 at all"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
devtools::document()
system('git add -A && git commit -m "last time i renamed pkg2 to pkg4. now re-renaming it back to pkg2 in hopes that it'll update itself"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
devtools::document()
system('git add -A && git commit -m "last time i renamed pkg2 to pkg4. now re-renaming it back to pkg2 in hopes that twill update itself"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
srhoads::pkg2
identical(pkg4, pkg3)
identical(pkg2, pkg3)
identical(pkg_old, pkg3)
devtools::document()
system('git add -A && git commit -m "last time i renamed pkg2 to pkg4. now re-renaming it back to pkg2 in hopes that twill update itself"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
devtools::document()
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
n
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n())
else data.frame(var = d) %>% group_by(var) %>% summarize(total = math()) %>% setNames(gsub("var", var, names(.)))
}
srhoads::dfsampler()
srhoads::dfsampler()[[1]]
srhoads::dfsampler()[[1]] %>% gbsum()
library(tidyverse)
srhoads::dfsampler()[[1]] %>% gbsum()
srhoads::dfsampler()[[1]] %>% gbsum(math=sum)
srhoads::dfsampler()[[1]] %>% gbsum(math=mean)
srhoads::dfsampler()[[1]] %>% gbsum(math=median)
srhoads::dfsampler()[[2]] %>% gbsum(math=median)
srhoads::dfsampler()[[1]] %>% gbsum()
srhoads::dfsampler()[[1]] %>% gbsum() %>% gbsub(var=total, math=sum)
srhoads::dfsampler()[[1]] %>% gbsum() %>% gbsum(var=total, math=sum)
srhoads::dfsampler()[[1]] %>% gbsum() %>% gbsum(var='total', math=sum)
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n()) %>% ungroup()
else data.frame(var = d) %>% group_by(var) %>% summarize(total = math()) %>% setNames(gsub("var", var, names(.))) %>% ungroup()
}
srhoads::dfsampler()[[1]] %>% gbsum() %>% gbsum(var='total', math=sum)
srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% gbsum(var='total', math=sum)
srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% gbsum()
srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total) %>% gbsum(var='total', math=sum)
srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total) %>% gbsum(var='tots', math=sum)
srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total) %>% gbsum(var='tots', math=mean)
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n()) %>% ungroup()
else data.frame(var = d) %>% group_by(var) %>% summarize(total = math()) %>% setNames(gsub("var", var, names(.)) %>% gsub("total", math, .)) %>% ungroup()
}
srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total) %>% gbsum(var='tots', math=mean)
blah <- srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total) %>% select(-total)# %>% #gbsum(var='tots', math=mean)
blah <- srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total) %>% select(-total)# %>% #gbsum(var='tots', math=mean)
blah <- srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total) %>% select(-matches('total'))# %>% #gbsum(var='tots', math=mean)
srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total)
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n()) %>% ungroup()
else data.frame(var = d) %>% group_by(var) %>% summarize(total = math()) %>% setNames(gsub("var", var, names(.))) %>% ungroup()
}
blah <- srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total) %>% select(-matches('total'))# %>% #gbsum(var='tots', math=mean)
n
deparse(n)
substitute(n)
eval(substitute(n))
deparse(substitute(n))
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n()) %>% ungroup()
else data.frame(var = d) %>% group_by(var) %>% summarize(total = math()) %>% setNames(gsub("var", var, names(.)) %>% gsub("total", deparse(substitute(n)), .)) %>% ungroup()
}
blah <- srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup() %>% mutate(tots = total) %>% select(-matches('total'))# %>% #gbsum(var='tots', math=mean)
srhoads::dfsampler()[[1]] %>% gbsum() %>% ungroup()
blah
blah %>% gbsum(var='tots', math=mean)
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n()) %>% ungroup()
else data.frame(var = d) %>% group_by(var) %>% summarize(total = math()) %>% setNames(gsub("var", var, names(.)) %>% gsub("total", deparse(substitute(n)), .)) %>% ungroup()
}
blah %>% gbsum(var='tots', math=mean)
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n()) %>% ungroup()
else data.frame(var = d) %>% group_by(var) %>% summarize(total = math()) %>% setNames(gsub("var", var, names(.)) %>% gsub("total", deparse(substitute(math)), .)) %>% ungroup()
}
blah %>% gbsum(var='tots', math=mean)
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n()) %>% ungroup()
else data.frame(var = d) %>% group_by(var) %>% summarize(total = math()) %>% setNames(gsub("var", var, names(.)) %>% gsub("total", deparse(substitute(math)), .)) %>% ungroup()
}
blah %>% gbsum(var='tots', math=mean)
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n())
else data.frame(var = d) %>% group_by(var) %>% summarize(total = math(., na.rm=T)) %>% setNames(gsub("var", var, names(.)))
}
blah
gbsum(blah$tots)
MATH <- function(x) tryCatch(math(x, na.rm=T), error=function(e) math())
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL, math=n){
MATH <- function(x) tryCatch(math(x, na.rm=T), error=function(e) math(x))
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n())
else data.frame(var = d) %>% group_by(var) %>% summarize(total = n()) %>% setNames(gsub("var", var, names(.)))
}
gbsum(blah, "tots")
blah
gbsum(blah, "tots", math=mean)
blah
blah[3,] <- c("female", 1)
gbsum(blah, "tots", math=mean)
# 09/11/2019 (SEPTEMBER 11, 2019) 09112019 #######################################################################################################################
#' A function to group by a desired variable and summarize it by `n()` (total count/sum)
#'
#' This function allows you to group by a desired variable and summarize it by `n()` (total count/sum). Compatible with dataframes & vectors. Uses `matches()` logic.
#' @export
#' @examples
#' gbsum(d, var=NULL)
gbsum <- group_by_summary <- group_by_summarize <- function(d, var=NULL){
if(is.null(var)) var <- "SUMMARYVAR"
if(is.data.frame(d)) d %>% ungroup() %>% group_by_at(vars(matches(var))) %>% summarize(total=n())
else data.frame(var = d) %>% group_by(var) %>% summarize(total = n()) %>% setNames(gsub("var", var, names(.)))
}
# 09122019 #######################################################################################################################
#' A function to both return and print output at the same time, but not redundantly.
#'
#' This function allows you to both return and print output at the same time, but not redundantly. You know when you run a function in R but don't assign the output to anything & it returns what you ran in the console? But not when you assign it to something? Well now you can print/cat & assign, but still get the stuff returned how intend. AND it won't return twice in the console--just one cute lil time.
#' @export
#' @examples
#' printurn(stuff, cat=T)
printurn <- caturn <- function(stuff, how=c("cat", "print")){
if(how=="cat") cat(stuff, "\n")
if(how=="print") print(stuff)
invisible(stuff)
}
printurn("cheyww")
match.arg
?match.arg
# 09122019 #######################################################################################################################
#' A function to both return and print output at the same time, but not redundantly.
#'
#' This function allows you to both return and print output at the same time, but not redundantly. You know when you run a function in R but don't assign the output to anything & it returns what you ran in the console? But not when you assign it to something? Well now you can print/cat & assign, but still get the stuff returned how intend. AND it won't return twice in the console--just one cute lil time.
#' @export
#' @examples
#' printurn(stuff, cat=T)
printurn <- caturn <- function(stuff, how=c("cat", "print")){
how <- match.arg(how)
if(how=="cat") cat(stuff, "\n")
if(how=="print") print(stuff)
invisible(stuff)
}
printurn("cheyww")
# 09122019 #######################################################################################################################
#' A function to both return and print output at the same time, but not redundantly.
#'
#' This function allows you to both return and print output at the same time, but not redundantly. You know when you run a function in R but don't assign the output to anything & it returns what you ran in the console? But not when you assign it to something? Well now you can print/cat & assign, but still get the stuff returned how intend. AND it won't return twice in the console--just one cute lil time. You can choose between `print` or `cat` as your desired output to the console.
#' @export
#' @examples
#' printurn(stuff, cat=T)
printurn <- caturn <- function(stuff, how=c("cat", "print")){
how <- match.arg(how)
if(how=="cat") tryCatch(cat(stuff, "\n"), error=function(e) print(stuff))
if(how=="print") print(stuff)
invisible(stuff)
}
dplyr::bind_rows
arrange
dplyr::arrange
dplyr::arrange
dplyr::distinct
group_by_at
library(tidyverse)
group_by_at
summarise
summarise
summarize
invisible
cat
cat(srhoads::dfsampler())
cat(srhoads::dfsampler() %>% paste0())
format(srhoads::dfsampler() %>% paste0())
toString(srhoads::dfsampler() %>% paste0())
toString(srhoads::dfsampler())
format(srhoads::dfsampler())
meow <- format(srhoads::dfsampler())
meow
meow <- format(srhoads::dfsampler())
meow <- cat(format(srhoads::dfsampler()))
docu
source(srhoads)
library(srhaods)
library(srhoads)
docu()
state.abb
??state.abb
devtools::document()
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
#' A function like `cat`, but wrapped in `\n` (line breaks)
#'
#' This function is like `cat` but is wrapped in `\n` (line breaks). It prints with formatting, and without quotes. Look at `cat`'s documentation for details
#' @export
#' @examples
#' catn(d)
catn <- function(x, file = "", sep = " ", fill = FALSE, labels = NULL, append = FALSE, collapse=" "){
cat("\n", paste0(x, collapse = collapse), "\n",
file=file, sep = sep, fill = fill, labels = labels, append = append)
}
catn("meow")
system('git add -A && git commit -m "new functions added/edited; fixed `\n` in `cat()` or its documentation issue hopefully. may have to try again"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
library(srhoads)
rm(list=ls())
library(srhoads)
#' Samantha Rhoads's function to give length and sumry
#'
#' Srhoads wrote this to allow you to...
#' @export
#' @examples
#' is.POSIX()
#'
sumrys <- function(x, n=7){
list(dim_or_length = tryCatch(dim(x), error=function(e) length(x)),
sumry = sumry(x, n)#,
# lapplysumry = lapply(x, function(xx) sumry(xx, n))
)
}
#' Samantha Rhoads's function to give length and sumry
#'
#' Srhoads wrote this to allow you to...
#' @export
#' @examples
#' is.POSIX()
#'
sumrys <- function(x, n=7){
list(dim_or_length = tryCatch(dim(x), error=function(e) length(x)),
sumry = sumry(x, n)#,
# lapplysumry = lapply(x, function(xx) sumry(xx, n))
)
}
#' Samantha Rhoads's function to return today's date in yyyymmdd format (no punctuation)
#'
#' Srhoads wrote this to allow you to return today's date in yyyymmdd format (no punctuation)
#' @export
#' @examples
#' sysdate()
sysdate <- function() format(Sys.Date(), format="%m%d%Y")
#' A function like `cat`, but wrapped in `\\\n` (line breaks)
#'
#' This function is like `cat` but is wrapped in `\\n` (line breaks). It prints with formatting, and without quotes. Look at `cat`'s documentation for details
#' @export
#' @examples
#' catn(d)
catn <- function(..., file = "", sep = " ", fill = FALSE, labels = NULL, append = FALSE, collapse=" "){
cat("\n", paste0(..., collapse = collapse), "\n",
file=file, sep = sep, fill = fill, labels = labels, append = append)
}
devtools::document()
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
devtools::document()
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
