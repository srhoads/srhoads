# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 2019-01-17 01172019 01-17-2019 01-2019 2019-01 012019 201901", DATEREGEX)
"?(0|2)?([0-9]{4}|[0-9]{1,2})()" -> DATEREGEX
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 2019-01-17 01172019 01-17-2019 01-2019 2019-01 012019 201901", DATEREGEX)
"?(1|2)?([0-9]{4}|[0-9]{1,2})()" -> DATEREGEX
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 2019-01-17 01172019 01-17-2019 01-2019 2019-01 012019 201901", DATEREGEX)
"?(0|1)?([0-9]{4}|[0-9]{1,2})()" -> DATEREGEX
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 2019-01-17 01172019 01-17-2019 01-2019 2019-01 012019 201901", DATEREGEX)
"?(0|1)?([0-9]{4}|[0-9]{1,2})" -> DATEREGEX
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 2019-01-17 01172019 01-17-2019 01-2019 2019-01 012019 201901", DATEREGEX)
"([0-9]{4}|[0-9]{1,2})" -> DATEREGEX
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 2019-01-17 01172019 01-17-2019 01-2019 2019-01 012019 201901", DATEREGEX)
"([0-9]{4}|[0-9]{1,2})([0-9]{1,2})([0-9]{4}|[0-9]{1,2})" -> DATEREGEX
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 2019-01-17 01172019 01-17-2019 01-2019 2019-01 012019 201901", DATEREGEX)
"([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 2019-01-17 01172019 01-17-2019 01-2019 2019-01 012019 201901", DATEREGEX)
"([0-9]{4}|[0-9]{1,2})/([0-9]{1,2})/([0-9]{4}|[0-9]{1,2})" -> DATEREGEX
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 2019-01-17 01172019 01-17-2019 01-2019 2019-01 012019 201901", DATEREGEX)
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01", DATEREGEX)
"([0-9]{4}|[0-9]{1,2})/([0-9]{1,2})/([0-9]{4}|[0-9]{1,2})" -> DATEREGEX
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01", DATEREGEX)
"([0-9]{4}|[0-9]{1,2}).([0-9]{1,2}).([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DOT
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", DATEREGEX)
"([0-9]{4}|[0-9]{1,2}).([0-9]{1,2}).([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DOT
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", DATEREGEX)
"([0-9]{4}|[0-9]{1,2})\\.([0-9]{1,2})\\.([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DOT
# gsub("", DATEREGEX, )
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", DATEREGEX)
fourDigitYr <- " ?(0|1)([0-9]{4})"
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- "\\b?(0|1)([0-9]{4})\\b"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- "\b?(0|1)([0-9]{4})\b"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- "\b?([0-9]{4})\b"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- "?(0|1)([0-9]{4})"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- " ?(0|1)([0-9]{4})"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- " ?(1|2)([0-9]{4})"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- " ?(1|2)([0-9]{3})"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- " ?(1|2)?(1|2|3)([0-9]{3})"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- " ?(19|20)([0-9]{3})"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
fourDigitYr <- " ?(19|20)([0-9]{2})"
# "([0-9]{4}|[0-9]{1,2})-([0-9]{1,2})-([0-9]{4}|[0-9]{1,2})" -> DATEREGEX -> DATEREGEX_DASH
stringr::str_extract_all("20190117 01172019 012019 201901 2019-01-17 01-17-2019 01-2019 2019-01 2019/01/17 01/17/2019 01/2019 2019/01 2019.01.17 01.17.2019 01.2019 2019.01", fourDigitYr)
STR2 <- "20200117 01172020 012020 202001 2020-01-17 01-17-2020 01-2020 2020-01 2020/01/17 01/17/2020 01/2020 2020/01 2020.01.17 01.17.2020 01.2020 2020.01"
stringr::str_extract_all(STR2, fourDigitYr)
fourDigitYr <- fourDigitYr_1900sOr2000s <- " ?(19|20)([0-9]{2})"
sep=c("-", "\\.", "/")
twoDigitMonth <- " ?(0|1)([0-9]{1})"
stringr::str_extract_all(STR2, twoDigitMonth)
twoDigitMonth <- " ?(0)([0-9]{1})"
stringr::str_extract_all(STR2, twoDigitMonth)
twoDigitMonth <- " ?(0)([0-9]{1})| ?(1)([0-2]{1})"
stringr::str_extract_all(STR2, twoDigitMonth)
STR3 <- "20201117 11172020 012020 202001 2020-11-17 11-17-2020 01-2020 2020-01 2020/11/17 11/17/2020 01/2020 2020/01 2020.11.17 11.17.2020 01.2020 2020.01"
twoDigitMonth <- " ?(0)([0-9]{1})| ?(1)([0-2]{1})"
stringr::str_extract_all(STR3, twoDigitMonth)
twoDigitMonth <- "\\b?(0)([0-9]{1})| ?(1)([0-2]{1})"
STR3 <- "20201117 11172020 012020 202001 2020-11-17 11-17-2020 01-2020 2020-01 2020/11/17 11/17/2020 01/2020 2020/01 2020.11.17 11.17.2020 01.2020 2020.01"
stringr::str_extract_all(STR3, twoDigitMonth)
twoDigitMonth <- "\b?(0)([0-9]{1})| ?(1)([0-2]{1})"
stringr::str_extract_all(STR3, twoDigitMonth)
twoDigitMonth <- "(0)([0-9]{1})| ?(1)([0-2]{1})"
stringr::str_extract_all(STR3, twoDigitMonth)
twoDigitMonth <- "\b?(0)([0-9]{1})| ?(1)([0-2]{1})"
twoDigitMonth <- "\b?(0)([0-9]{1})|\b?(1)([0-2]{1})"
stringr::str_extract_all(STR3, twoDigitMonth)
stringr::str_extract_all(STR3, twoDigitMonth) %>% unlist() %>% length()
twoDigitMonth <- "\b?(0)([0-9]{1})| ?(1)([0-2]{1})"
stringr::str_extract_all(STR3, twoDigitMonth) %>% unlist() %>% length()
stringr::str_extract_all(STR3, twoDigitMonth)
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
stringr::str_extract_all(STR2, fourDigitYr)
# twoDigitMonth <- "\b?(0)([0-9]{1})|\b?(1)([0-2]{1})"
twoDigitMonth <- "\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31"
# twoDigitMonth <- "\b?(0)([0-9]{1})|\b?(1)([0-2]{1})"
twoDigitDay <- "\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31"
twoDigitMonth <- "\b?(0)([0-9]{1})|\b?(1)([0-2]{1})"
twoDigitDay <- "\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31"
stringr::str_extract_all(STR3, twoDigitDay)
paste0(fourDigitYr, sep, twoDigitMonth, sep, twoDigitDay)
lapply(sep, function(sep){
paste0(fourDigitYr, sep, twoDigitMonth, sep, twoDigitDay)
})
sep=c("-", "\\.", "/", "")
lapply(sep, function(sep){
paste0(fourDigitYr, sep, twoDigitMonth, sep, twoDigitDay)
})
sapply(sep, function(sep){
paste0(fourDigitYr, sep, twoDigitMonth, sep, twoDigitDay)
})
lapply(sep, function(sep){
paste0(fourDigitYr, sep, twoDigitMonth, sep, twoDigitDay)
}) %>% unlist()
lapply(sep, function(sep){
paste0(fourDigitYr, sep, twoDigitMonth, sep, twoDigitDay)
}) %>% unlist() %>% paste0(., collapse="")
lapply(sep, function(sep){
paste0(fourDigitYr, sep, twoDigitMonth, sep, twoDigitDay)
}) %>% unlist() %>% paste0(., collapse="|")
stringr::str_extract_all
string <- STR2
REGEXPATS <- paste0(fourDigitYr, sep, twoDigitMonth, sep, twoDigitDay)
REGEXPATS
lapply(sep, function(sep){
REGEXPATS <- paste0(fourDigitYr, sep, twoDigitMonth, sep, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
}) %>% unlist()
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
}) %>% unlist()
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1})\b)"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1})\b)"
twoDigitDay <- "(\b?(0)([0-9]{1})\b|\b?(1)([0-9]{1})\b|\b?(2)([0-9]{1})|30\b|31\b)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1})\b)"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1})\b)"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1})\b)"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1})\b)"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)\b"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1})\b)"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1})\b)"
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1})\b)"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1})\b)"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31\b)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1})\b)"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1})\b)"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30\b|31\b)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
STR4 <- "20201130 11302020 012020 202001 2020-11-17 11-30-2020 01-2020 2020-01 2020/11/17 11/17/2020 01/2020 2020/01 2020.11.17 11.17.2020 01.2020 2020.01"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(STR4, REGEXPATS)
})# %>% unlist()
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1})\b)"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1})\b)"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30\b|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(STR4, REGEXPATS)
})# %>% unlist()
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
string <- STR4
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
extract_eightDigitDate <- function(string, sep=c("-", "\\.", "/", "")){
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})# %>% unlist()
}
extract_eightDigitDate <- function(string, sep=c("-", "\\.", "/", "")){
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})
}
REGEXPATS <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
lapply(sep, function(sepi){
REGEXPATS <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
stringr::str_extract_all(string, REGEXPATS)
})
lapply(sep, function(sepi){
c(REGEXPATS = paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay),
REGEXPATS2 = paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay))
stringr::str_extract_all(string, REGEXPATS)
})
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
})
lapply(sep, function(sepi){
REGEXPATS <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
stringr::str_extract_all(string, REGEXPATS)
})
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
stringr::str_extract_all(string, REGEXPATS)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
stringr::str_extract_all(string, REGEXPATS2)
})
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
matchesA <- stringr::str_extract_all(string, REGEXPATS)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
matchesB <- stringr::str_extract_all(string, REGEXPATS2)
c(matchesA, matchesB)
})
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
matchesA <- stringr::str_extract_all(string, REGEXPATS)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
matchesB <- stringr::str_extract_all(string, REGEXPATS2)
c(matchesA)
})
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
matchesA <- stringr::str_extract_all(string, REGEXPATS)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
matchesB <- stringr::str_extract_all(string, REGEXPATS2)
c(matchesB)
})
REGEXPATS
paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
sepi = sep[1]
paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
paste0("(", REGEXPATS, ")", "|")
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
paste0("(", REGEXPATS, ")", "|")
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
REGEXPATS2
paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
string
REGEXPATS_1_2 <- paste0(paste0("", REGEXPATS, ""), "|", paste0("", REGEXPATS2, ""))
stringr::str_extract_all(string, REGEXPATS_1_2)
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
matchesA <- stringr::str_extract_all(string, REGEXPATS)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
matchesB <- stringr::str_extract_all(string, REGEXPATS2)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
# c(matchesA, matchesB)
})
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
extract_eightDigitDate <- function(string, sep=c("-", "\\.", "/", "")){
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
# lapply(sep, function(sepi){
#   REGEXPATS <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
#   stringr::str_extract_all(string, REGEXPATS)
# })
}
extract_eightDigitDate(string="I am Sam and I was born on 01-17-1996. Today is 20201001.", sep=c("-", "\\.", "/", ""))
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
# twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
string
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
fourDigitYr <- fourDigitYr_1900sOr2000s <- "\b?(19|20)([0-9]{2})"
# twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
# twoDigitMonth <- "(\b?(0|1)([0-9]{1}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
twoDigitDay <- "(\b?(0)([0-9]{1})|\b?(1)([0-9]{1})|\b?(2)([0-9]{1})|30|31)"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth, sepi, twoDigitDay)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, twoDigitDay, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
#' Samantha Rhoads's function to extract a date of 6 digits from a string. `sep` is the character that separates parts of a date, ie: dash or slash or nothing. A 6 digit date is like "01-2019" or "202001" or "01/2020"
#'
#' Srhoads wrote this to allow you to extract a date of 8 digits from a string, ie: `extract_sixDigitDate(string="I am Sam and I was born on 01-1996. Today is 202001.", sep=c("-", "\\.", "/", ""))` returns a hierarchical list with: "01-17-1996" and "20201001" in it at various places
#' @export
#' @examples
#' extract_sixDigitDate()
extract_sixDigitDate <- function(string, sep=c("-", "\\.", "/", "")){
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
}
#' Samantha Rhoads's function to extract a date of 6 digits from a string. `sep` is the character that separates parts of a date, ie: dash or slash or nothing. A 6 digit date is like "01-2019" or "202001" or "01/2020"
#'
#' Srhoads wrote this to allow you to extract a date of 8 digits from a string, ie: `extract_sixDigitDate(string="I am Sam and I was born on 01-1996. Today is 202001.", sep=c("-", "\\.", "/", ""))` returns a hierarchical list with: "01-17-1996" and "20201001" in it at various places
#' @export
#' @examples
#' extract_sixDigitDate()
extract_sixDigitDate <- function(string, sep=c("-", "\\.", "/", "")){
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
twoDigitMonth <- "(\b?(0)([0-9]{1})|\b?(1)([0-2]{1}))"
lapply(sep, function(sepi){
REGEXPATS <- paste0(fourDigitYr, sepi, twoDigitMonth)
REGEXPATS2 <- paste0(twoDigitMonth, sepi, fourDigitYr)
REGEXPATS_1_2 <- paste0(paste0("(", REGEXPATS, ")"), "|", paste0("(", REGEXPATS2, ")"))
stringr::str_extract_all(string, REGEXPATS_1_2)
})
}
extract_sixDigitDate(string="I am Sam and I was born on 01-1996. Today is 202001.", sep=c("-", "\\.", "/", ""))
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
REGEXPATS <- paste0(fourDigitYr)
stringr::str_extract_all(string, REGEXPATS)
string <- "2019 2020 1999 1902 1738 1324"
stringr::str_extract_all(string, REGEXPATS)
fourDigitYr <- "(\b?(1)([0-9]{3}))|(\b?(19|20)([0-9]{2}))"
REGEXPATS <- paste0(fourDigitYr)
stringr::str_extract_all(string, fourDigitYr)
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
if(includePre1900s) fourDigitYr <- "(\b?(1)([0-9]{3}))|(\b?(19|20)([0-9]{2}))"
stringr::str_extract_all(string, fourDigitYr)
includePre1900s=F
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
if(includePre1900s) fourDigitYr <- "(\b?(1)([0-9]{3}))|(\b?(19|20)([0-9]{2}))"
stringr::str_extract_all(string, fourDigitYr)
includePre1900s=T
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
if(includePre1900s) fourDigitYr <- "(\b?(1)([0-9]{3}))|(\b?(19|20)([0-9]{2}))"
stringr::str_extract_all(string, fourDigitYr)
#' Samantha Rhoads's function to extract a year of 4 digits. Can be in the 1900s or 2000s only, or can include centuries before that
#' @export
#' @examples
#' extract_sixDigitDate()
extract_fourDigitYear <- function(string, includePre1900s=T){
fourDigitYr <- fourDigitYr_1900sOr2000s <- "(\b?(19|20)([0-9]{2}))"
if(includePre1900s) fourDigitYr <- "(\b?(1)([0-9]{3}))|(\b?(19|20)([0-9]{2}))"
stringr::str_extract_all(string, fourDigitYr)
}
roxygen2::roxygenise(clean = TRUE)
devtools::document()
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
install.packages("devtools")
install.packages("devtools")
rm(list=ls())
roxygen2::roxygenise(clean = TRUE)
devtools::document() # roxygen2::roxygenise(clean = TRUE)
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
select_vec
#' Samantha Rhoads's function returns R package URLs for a given input package. Great if you need to install old package versions by their zipped/compressed tar.gz URL from cran
#'
#' Srhoads wrote this to allow you to get versions of packages. You can return the whole package version URL if desired too, ie: input "devtools" and get "https://cran.r-project.org/src/contrib/Archive/devtools/devtools_2.0.2.tar.gz" and other versions as a vector
#' @export
#' @examples
#' getPackageVersions()
getPackageVersions <- function(pkg = "devtools", sortNewToOld=T, getFullURL=T){
baseURL <- "https://cran.r-project.org/src/contrib/Archive/"
url <- paste0(baseURL, pkg, "/")
urlHTML <- read_html(url)
urlHTML %>%
rvest::html_nodes("td") %>%
rvest::html_nodes("a")%>%
rvest::html_text() %>%
select_vec(pkg) %>%
{if(sortNewToOld) rev(.) else .} %>%
{if(getFullURL) paste0(url, .) else .}
}
roxygen2::roxygenise(clean = TRUE)
devtools::document() # roxygen2::roxygenise(clean = TRUE)
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
rm(list=ls())
install.packages("https://cran.r-project.org/src/contrib/Archive/readxl/readxl_1.0.0.tar.gz", repos=NULL, type="source")
srhoads::extract_date
