createStyle(halign = "center", border = c("bottom"), borderStyle = "thin", textDecoration = "bold",
wrapText=T, valign="center"# fgFill = "#2020FF", fontColour = "white"
)
# openxlsx::
addFilter(wb, sheet=sheetname, row=1, cols=1:ncol(wbdf))
# openxlsx::
addStyle(wb, sheet=sheetname, style=LabelStyle, rows=1, cols=1:ncol(wbdf))
# freezePane(wb, 1, firstRow=T, firstCol=T)
tryCatch({#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=freeze_before_colnum)}, error=function(e){#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=1)})
width_vec1 <- apply(wbdf, 2, function(x){max(nchar(as.character(x))+1+colwidthplus, na.rm = TRUE)})
width_vec2 <- names(wbdf) %>% sapply(., function(x){
xw <- strsplit(x, split=" |[[:space:]]|-|\\.") %>%unlist() %>% trimws_() %>% as.list() %>% setNames(names(.)<-.) %>% nchar() %>% max()
# xw <- map_chr(strsplit(x, " |[[:space:]]|-|\\."), ~ .[which.max(nchar(.))])
xw+1+colwidthplus
})
width_vec <- tibble(width_vec1, width_vec2) %>% rowwise() %>% mutate(width_vec = max(width_vec1, width_vec2)) %>% .$width_vec %>% sapply(., function(n){min(maxcolwidth, n, na.rm=T)})
# openxlsx::
setColWidths(wb, sheet=sheetname, cols=1:ncol(wbdf), widths=width_vec)
}
# openxlsx::
saveWorkbook(wb, filename, overwrite=TRUE)
if(open_file){system_open(filename)}
if(load_unload_openxlsx){unload_pkg("openxlsx")}
wbdf
}
writexl_open_formatted(lod)
#' Samantha Rhoads's function to write to Excel with some common dataframe special formatting
#' @export
#' @examples
#' writexl_open_formatted(df=NULL, filename, open_file=T, max_colwidth=50, colwidthplus=0)
writexl_open_formatted <- function(df=NULL, filename=NULL, open_file=T, maxcolwidth=50, colwidthplus=0, freeze_after_col=c("gender", 2)[1]){ #{filename="Notes & Annotations/jackson_lewis_people-20220509-temp.xlsx"; df=jackson_lewis_people}
# library(openxlsx)
if(!exists("loadWorkbook")){
load_unload_openxlsx <- T
pkg('openxlsx')
} else {
load_unload_openxlsx <- F
}
if(is.nanull(filename)){
filename=tempfile(fileext = ".xlsx")
}
if(!file.exists(filename)|is.data.frame(df)|is.list(df)){
writexl::write_xlsx(df, filename)
}
sheetnames <- readxl::excel_sheets(filename)
wb = #openxlsx::
loadWorkbook(filename)
for (sheetname in sheetnames){
wbdf = if(!is.data.frame(df)){readxl::read_excel(filename, sheet=sheetname)} else {df}
# activeSheet(wb) <- sheetname
if(is.numeric(freeze_after_col)){
freeze_before_colnum <- freeze_after_col + 1
} else if(lookslike_number(freeze_after_col)){
freeze_before_colnum <- as.numeric(freeze_after_col) + 1
} else {
freeze_before_colnum <- grep(freeze_after_col, names(wbdf)) %>% max() %>% {.+1}
}
LabelStyle <- #openxlsx::
createStyle(halign = "center", border = c("bottom"), borderStyle = "thin", textDecoration = "bold",
wrapText=T, valign="center"# fgFill = "#2020FF", fontColour = "white"
)
# openxlsx::
addFilter(wb, sheet=sheetname, row=1, cols=1:ncol(wbdf))
# openxlsx::
addStyle(wb, sheet=sheetname, style=LabelStyle, rows=1, cols=1:ncol(wbdf))
# freezePane(wb, 1, firstRow=T, firstCol=T)
tryCatch({#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=freeze_before_colnum)}, error=function(e){#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=1)})
width_vec1 <- apply(wbdf, 2, function(x){max(nchar(as.character(x))+1+colwidthplus, na.rm = TRUE)})
width_vec2 <- names(wbdf) %>% sapply(., function(x){
xw <- strsplit(x, split=" |[[:space:]]|-|\\.") %>%unlist() %>% trimws_() %>% as.list() %>% setNames(names(.)<-.) %>% nchar() %>% max()
# xw <- map_chr(strsplit(x, " |[[:space:]]|-|\\."), ~ .[which.max(nchar(.))])
xw+1+colwidthplus
})
width_vec <- tibble(width_vec1, width_vec2) %>% rowwise() %>% mutate(width_vec = max(width_vec1, width_vec2)) %>% .$width_vec %>% sapply(., function(n){min(maxcolwidth, n, na.rm=T)})
# openxlsx::
setColWidths(wb, sheet=sheetname, cols=1:ncol(wbdf), widths=width_vec)
}
# openxlsx::
saveWorkbook(wb, filename, overwrite=TRUE)
if(open_file){system_open(filename)}
if(load_unload_openxlsx){unload_pkg("openxlsx")}
wbdf
}
writexl_open_formatted(lod)
#' Samantha Rhoads's function to write to Excel with some common dataframe special formatting
#' @export
#' @examples
#' writexl_open_formatted(df=NULL, filename, open_file=T, max_colwidth=50, colwidthplus=0)
writexl_open_formatted <- function(df=NULL, filename=NULL, open_file=T, maxcolwidth=50, colwidthplus=0, freeze_after_col=c("^(EEID|eeid)$", 1)[2]){ #{filename="Notes & Annotations/jackson_lewis_people-20220509-temp.xlsx"; df=jackson_lewis_people}
# library(openxlsx)
if(!exists("loadWorkbook")){
load_unload_openxlsx <- T
pkg('openxlsx')
} else {
load_unload_openxlsx <- F
}
if(is.nanull(filename)){
filename=tempfile(fileext = ".xlsx")
}
if(!file.exists(filename)|is.data.frame(df)|is.list(df)){
writexl::write_xlsx(df, filename)
}
sheetnames <- readxl::excel_sheets(filename)
wb = #openxlsx::
loadWorkbook(filename)
for (sheetname in sheetnames){
wbdf = if(!is.data.frame(df)){readxl::read_excel(filename, sheet=sheetname)} else {df}
# activeSheet(wb) <- sheetname
if(is.numeric(freeze_after_col)){
freeze_before_colnum <- freeze_after_col + 1
} else if(lookslike_number(freeze_after_col)){
freeze_before_colnum <- as.numeric(freeze_after_col) + 1
} else {
freeze_before_colnum <- grep(freeze_after_col, names(wbdf)) %>% max() %>% {.+1}
}
LabelStyle <- #openxlsx::
createStyle(halign = "center", border = c("bottom"), borderStyle = "thin", textDecoration = "bold",
wrapText=T, valign="center"# fgFill = "#2020FF", fontColour = "white"
)
# openxlsx::
addFilter(wb, sheet=sheetname, row=1, cols=1:ncol(wbdf))
# openxlsx::
addStyle(wb, sheet=sheetname, style=LabelStyle, rows=1, cols=1:ncol(wbdf))
# freezePane(wb, 1, firstRow=T, firstCol=T)
tryCatch({#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=freeze_before_colnum)}, error=function(e){#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=1)})
width_vec1 <- apply(wbdf, 2, function(x){max(nchar(as.character(x))+1+colwidthplus, na.rm = TRUE)})
width_vec2 <- names(wbdf) %>% sapply(., function(x){
xw <- strsplit(x, split=" |[[:space:]]|-|\\.") %>%unlist() %>% trimws_() %>% as.list() %>% setNames(names(.)<-.) %>% nchar() %>% max()
# xw <- map_chr(strsplit(x, " |[[:space:]]|-|\\."), ~ .[which.max(nchar(.))])
xw+1+colwidthplus
})
width_vec <- tibble(width_vec1, width_vec2) %>% rowwise() %>% mutate(width_vec = max(width_vec1, width_vec2)) %>% .$width_vec %>% sapply(., function(n){min(maxcolwidth, n, na.rm=T)})
# openxlsx::
setColWidths(wb, sheet=sheetname, cols=1:ncol(wbdf), widths=width_vec)
}
# openxlsx::
saveWorkbook(wb, filename, overwrite=TRUE)
if(open_file){system_open(filename)}
if(load_unload_openxlsx){unload_pkg("openxlsx")}
wbdf
}
writexl_open_formatted(lod)
devtools::document() # {roxygen2::roxygenise(clean=T)}
roxygen2::roxygenise(clean=T)
devtools::document() # {roxygen2::roxygenise(clean=T)}
system('git add -A && git commit -m "added/edited write and read excel functions"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
#' Samantha Rhoads's function to write to Excel with some common dataframe special formatting
#' @export
#' @examples
#' writexl_open_formatted(df=NULL, filename, open_file=T, max_colwidth=50, colwidthplus=0)
writexl_open_formatted <- function(x=NULL, filename=NULL, open_file=T, maxcolwidth=50, colwidthplus=0, freeze_after_col=c("^(EEID|eeid)$", 1)[2], clean_colnames=F){ #{filename="Notes & Annotations/jackson_lewis_people-20220509-temp.xlsx"; df=jackson_lewis_people}
# library(openxlsx)
if(!exists("loadWorkbook")){
load_unload_openxlsx <- T
pkg('openxlsx')
} else {
load_unload_openxlsx <- F
}
if(is.nanull(filename)){
filename=tempfile(fileext = ".xlsx")
}
if(!file.exists(filename)|is.data.frame(x)|is.list(x)){
df <- x %>% setNames(names(.) %>% gsub("_", " ", .))
writexl::write_xlsx(df, filename)
}
sheetnames <- readxl::excel_sheets(filename)
wb = #openxlsx::
loadWorkbook(filename)
for (sheetname in sheetnames){
wbdf = if(!is.data.frame(x)){readxl::read_excel(filename, sheet=sheetname)} else {x}
# activeSheet(wb) <- sheetname
if(is.numeric(freeze_after_col)){
freeze_before_colnum <- freeze_after_col + 1
} else if(lookslike_number(freeze_after_col)){
freeze_before_colnum <- as.numeric(freeze_after_col) + 1
} else {
freeze_before_colnum <- grep(freeze_after_col, names(wbdf)) %>% max() %>% {.+1}
}
LabelStyle <- #openxlsx::
createStyle(halign = "center", border = c("bottom"), borderStyle = "thin", textDecoration = "bold",
wrapText=T, valign="center"# fgFill = "#2020FF", fontColour = "white"
)
# openxlsx::
addFilter(wb, sheet=sheetname, row=1, cols=1:ncol(wbdf))
# openxlsx::
addStyle(wb, sheet=sheetname, style=LabelStyle, rows=1, cols=1:ncol(wbdf))
# freezePane(wb, 1, firstRow=T, firstCol=T)
tryCatch({#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=freeze_before_colnum)}, error=function(e){#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=1)})
width_vec1 <- apply(wbdf, 2, function(x){max(nchar(as.character(x))+1+colwidthplus, na.rm = TRUE)})
width_vec2 <- names(wbdf) %>% sapply(., function(x){
xw <- strsplit(x, split=" |[[:space:]]|-|\\.") %>%unlist() %>% trimws_() %>% as.list() %>% setNames(names(.)<-.) %>% nchar() %>% max()
# xw <- map_chr(strsplit(x, " |[[:space:]]|-|\\."), ~ .[which.max(nchar(.))])
xw+1+colwidthplus
})
width_vec <- tibble(width_vec1, width_vec2) %>% rowwise() %>% mutate(width_vec = max(width_vec1, width_vec2)) %>% .$width_vec %>% sapply(., function(n){min(maxcolwidth, n, na.rm=T)})
# openxlsx::
setColWidths(wb, sheet=sheetname, cols=1:ncol(wbdf), widths=width_vec)
}
# openxlsx::
saveWorkbook(wb, filename, overwrite=TRUE)
if(open_file){system_open(filename)}
if(load_unload_openxlsx){unload_pkg("openxlsx")}
# wbdf
x
}
writexl_open_formatted <- function(x=NULL, filename=NULL, open_file=T, maxcolwidth=50, colwidthplus=0, freeze_after_col=c("^(EEID|eeid)$", 1)[2], clean_colnames=F){ #{filename="Notes & Annotations/jackson_lewis_people-20220509-temp.xlsx"; df=jackson_lewis_people}
# library(openxlsx)
if(!exists("loadWorkbook")){
load_unload_openxlsx <- T
pkg('openxlsx')
} else {
load_unload_openxlsx <- F
}
if(is.nanull(filename)){
filename=tempfile(fileext = ".xlsx")
}
if(!file.exists(filename)|is.data.frame(x)|is.list(x)){
df <- if(clean_colnames){x %>% setNames(names(.) %>% gsub("_", " ", .))} else {x}
writexl::write_xlsx(df, filename)
}
sheetnames <- readxl::excel_sheets(filename)
wb = #openxlsx::
loadWorkbook(filename)
for (sheetname in sheetnames){
wbdf = if(!is.data.frame(x)){readxl::read_excel(filename, sheet=sheetname)} else {x}
# activeSheet(wb) <- sheetname
if(is.numeric(freeze_after_col)){
freeze_before_colnum <- freeze_after_col + 1
} else if(lookslike_number(freeze_after_col)){
freeze_before_colnum <- as.numeric(freeze_after_col) + 1
} else {
freeze_before_colnum <- grep(freeze_after_col, names(wbdf)) %>% max() %>% {.+1}
}
LabelStyle <- #openxlsx::
createStyle(halign = "center", border = c("bottom"), borderStyle = "thin", textDecoration = "bold",
wrapText=T, valign="center"# fgFill = "#2020FF", fontColour = "white"
)
# openxlsx::
addFilter(wb, sheet=sheetname, row=1, cols=1:ncol(wbdf))
# openxlsx::
addStyle(wb, sheet=sheetname, style=LabelStyle, rows=1, cols=1:ncol(wbdf))
# freezePane(wb, 1, firstRow=T, firstCol=T)
tryCatch({#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=freeze_before_colnum)}, error=function(e){#openxlsx::
freezePane(wb, sheet=sheetname, firstActiveRow=2, firstActiveCol=1)})
width_vec1 <- apply(wbdf, 2, function(x){max(nchar(as.character(x))+1+colwidthplus, na.rm = TRUE)})
width_vec2 <- names(wbdf) %>% sapply(., function(x){
xw <- strsplit(x, split=" |[[:space:]]|-|\\.") %>%unlist() %>% trimws_() %>% as.list() %>% setNames(names(.)<-.) %>% nchar() %>% max()
# xw <- map_chr(strsplit(x, " |[[:space:]]|-|\\."), ~ .[which.max(nchar(.))])
xw+1+colwidthplus
})
width_vec <- tibble(width_vec1, width_vec2) %>% rowwise() %>% mutate(width_vec = max(width_vec1, width_vec2)) %>% .$width_vec %>% sapply(., function(n){min(maxcolwidth, n, na.rm=T)})
# openxlsx::
setColWidths(wb, sheet=sheetname, cols=1:ncol(wbdf), widths=width_vec)
}
# openxlsx::
saveWorkbook(wb, filename, overwrite=TRUE)
if(open_file){system_open(filename)}
if(load_unload_openxlsx){unload_pkg("openxlsx")}
# wbdf
x
}
#' Samantha Rhoads's function to recode race more quickly than prior versions!!
#' @export
#' @examples
#' recode_race(v)
recode_race <- function(v, full_race_names=F){
v0 <- gsub("[[:space:]]| ", "", tolower(v)) %>% gsub("2(\\+|ormore|plus).*", "twoormoreraces", .) %>% gsub("[[:punct:]]|[[:space:]]|nothispanic(orlatino).*|no(n|t)white.*", "", .) %>% gsub("no(n|t)his.*lat.*", "", .)
v1 <- recode(v0, "white"="1", "blackorafricanamerican"="2", "hispanicorlatino"="3", "asian"="4", "americanindianoralaskanative"="5", "nativehawaiianorotherpacificislander"="6", "twoormoreraces"="7")
if(any(grepl("[[:alpha:]]", v1))){
racetext <- c("white|caucasian|irish", "black|africa", "hispan|latino|latinx", "asia(|n)", "am.*ind|nat.*am", "pac.*isl|nat.*hawai|nhopi", "twoormore")
v1 <- ifelse(grepl(racetext[7], v1)&!grepl(paste0(setdiff(racetext, racetext[7]), collapse="|"), v1), "7",
ifelse(grepl(racetext[6], v1)&!grepl(paste0(setdiff(racetext, racetext[6]), collapse="|"), v1), "6",
ifelse(grepl(racetext[5], v1)&!grepl(paste0(setdiff(racetext, racetext[5]), collapse="|"), v1), "5",
ifelse(grepl(racetext[4], v1)&!grepl(paste0(setdiff(racetext, racetext[4]), collapse="|"), v1), "4",
ifelse(grepl(racetext[3], v1)&!grepl(paste0(setdiff(racetext, racetext[3]), collapse="|"), v1), "3",
ifelse(grepl(racetext[2], v1)&!grepl(paste0(setdiff(racetext, racetext[2]), collapse="|"), v1), "2",
ifelse(grepl(racetext[1], v1)&!grepl(paste0(setdiff(racetext, racetext[1]), collapse="|"), v1), "1",
v1)))))))
if(any(grepl("[[:alpha:]]", v1))){
racetext <- c("wh|nonminority|polish|swed(e|is)|greek|1", "blk|afr|jamaic|egypt|somali|westindi|2", "hisp|lat|mexic|span|venezu|hondur|nicarag|puer.*ric|dominic|cuba|brazil|guatem|colombi|boliv|argenti|argentin|centralamer|salvad|3", "asia(|n)|chin|japa|korea|4", "am.*(ind|nat|alask|ak)|nat.*(am|ind|alask|ak)|ind.*(am|nat|alask|ak)|(alask|ak).*(am|nat)|5", "pac.*isl|nat.*hawai|nhopi|hawai|hopi|nhop|pacif|islander|tagal(a|o)|fil(l|)ipi", "twoormore|twoplus|races|multiple|morethan|twoorm|7")
v1 <- ifelse(grepl(racetext[7], v1)&!grepl(paste0(setdiff(racetext, racetext[7]), collapse="|"), v1), "7",
ifelse(grepl(racetext[6], v1)&!grepl(paste0(setdiff(racetext, racetext[6]), collapse="|"), v1), "6",
ifelse(grepl(racetext[5], v1)&!grepl(paste0(setdiff(racetext, racetext[5]), collapse="|"), v1), "5",
ifelse(grepl(racetext[4], v1)&!grepl(paste0(setdiff(racetext, racetext[4]), collapse="|"), v1), "4",
ifelse(grepl(racetext[3], v1)&!grepl(paste0(setdiff(racetext, racetext[3]), collapse="|"), v1), "3",
ifelse(grepl(racetext[2], v1)&!grepl(paste0(setdiff(racetext, racetext[2]), collapse="|"), v1), "2",
ifelse(grepl(racetext[1], v1)&!grepl(paste0(setdiff(racetext, racetext[1]), collapse="|"), v1), "1",
v1)))))))
if(any(grepl("[[:alpha:]]", v1))){
v1 <- recode(v1, "w"="1", "b"="2", "l"="3", "a"="4", "ai"="5", "hi"="6", "bw"="7",
"his"="3", "baa"="2", "lat"="3", "hila"="3", "native"="5", "five"="5", "amin"="5", "pac"="6", "six"="6")
if(any(grepl("[[:alpha:]]", v1))){
v1 <- ifelse(grepl('pac.*(isl|haw|nat)|nhopi|nat.*haw|haw.*pac|hawai|philip|polynes|samoa|pacific|tonga|hawpi|aorpi|micrones|fiji|maori|vanuat|tuval|palau|pacif|nauru|fil(l|)ipin|islander|malay|melanes|nhorpi', v1), '6',
ifelse(grepl('(amer|alask).*(ind|nat)|(nat|ind).*(alask|amer)|(nat|am).*ind|nat.*am|ind.*nat|indigen|alaska|aioan', v1), '5',
ifelse(grepl('africa|black|westindi|jamaica|blk|somali|morocc|egypt|nigeria', v1), '2',
ifelse(grepl('^((f|m|e|d|s|)hisp|latin|hislat|spanis|hipanic|lathis)|costaric|venezu|southam|salvador|mexic|ecua(d|t)or|puertoric|portugs|nicarag|bolivi|peruvi|hispanic|latin|chican|brazil|argentin', v1), '3', v1)
)))
}
}
}
}
if(full_race_names){
v1 <- recode(v1, "1"="White", "2"="Black or African American", "3"="Hispanic or Latino", "4"="Asian", "5"="American Indian or Alaska Native", "6"="Native Hawaiian or Other Pacific Islander", "7"="Two or More Races")
}
v1
}
#' Samantha Rhoads's function to recode race more quickly than prior versions!!
#' @export
#' @examples
#' recode_race(v)
recode_race <- function(v, full_names=F){
v0 <- gsub("[[:space:]]| ", "", tolower(v)) %>% gsub("2(\\+|ormore|plus).*", "twoormoreraces", .) %>% gsub("[[:punct:]]|[[:space:]]|nothispanic(orlatino).*|no(n|t)white.*", "", .) %>% gsub("no(n|t)his.*lat.*", "", .)
v1 <- recode(v0, "white"="1", "blackorafricanamerican"="2", "hispanicorlatino"="3", "asian"="4", "americanindianoralaskanative"="5", "nativehawaiianorotherpacificislander"="6", "twoormoreraces"="7")
if(any(grepl("[[:alpha:]]", v1))){
racetext <- c("white|caucasian|irish", "black|africa", "hispan|latino|latinx", "asia(|n)", "am.*ind|nat.*am", "pac.*isl|nat.*hawai|nhopi", "twoormore")
v1 <- ifelse(grepl(racetext[7], v1)&!grepl(paste0(setdiff(racetext, racetext[7]), collapse="|"), v1), "7",
ifelse(grepl(racetext[6], v1)&!grepl(paste0(setdiff(racetext, racetext[6]), collapse="|"), v1), "6",
ifelse(grepl(racetext[5], v1)&!grepl(paste0(setdiff(racetext, racetext[5]), collapse="|"), v1), "5",
ifelse(grepl(racetext[4], v1)&!grepl(paste0(setdiff(racetext, racetext[4]), collapse="|"), v1), "4",
ifelse(grepl(racetext[3], v1)&!grepl(paste0(setdiff(racetext, racetext[3]), collapse="|"), v1), "3",
ifelse(grepl(racetext[2], v1)&!grepl(paste0(setdiff(racetext, racetext[2]), collapse="|"), v1), "2",
ifelse(grepl(racetext[1], v1)&!grepl(paste0(setdiff(racetext, racetext[1]), collapse="|"), v1), "1",
v1)))))))
if(any(grepl("[[:alpha:]]", v1))){
racetext <- c("wh|nonminority|polish|swed(e|is)|greek|1", "blk|afr|jamaic|egypt|somali|westindi|2", "hisp|lat|mexic|span|venezu|hondur|nicarag|puer.*ric|dominic|cuba|brazil|guatem|colombi|boliv|argenti|argentin|centralamer|salvad|3", "asia(|n)|chin|japa|korea|4", "am.*(ind|nat|alask|ak)|nat.*(am|ind|alask|ak)|ind.*(am|nat|alask|ak)|(alask|ak).*(am|nat)|5", "pac.*isl|nat.*hawai|nhopi|hawai|hopi|nhop|pacif|islander|tagal(a|o)|fil(l|)ipi", "twoormore|twoplus|races|multiple|morethan|twoorm|7")
v1 <- ifelse(grepl(racetext[7], v1)&!grepl(paste0(setdiff(racetext, racetext[7]), collapse="|"), v1), "7",
ifelse(grepl(racetext[6], v1)&!grepl(paste0(setdiff(racetext, racetext[6]), collapse="|"), v1), "6",
ifelse(grepl(racetext[5], v1)&!grepl(paste0(setdiff(racetext, racetext[5]), collapse="|"), v1), "5",
ifelse(grepl(racetext[4], v1)&!grepl(paste0(setdiff(racetext, racetext[4]), collapse="|"), v1), "4",
ifelse(grepl(racetext[3], v1)&!grepl(paste0(setdiff(racetext, racetext[3]), collapse="|"), v1), "3",
ifelse(grepl(racetext[2], v1)&!grepl(paste0(setdiff(racetext, racetext[2]), collapse="|"), v1), "2",
ifelse(grepl(racetext[1], v1)&!grepl(paste0(setdiff(racetext, racetext[1]), collapse="|"), v1), "1",
v1)))))))
if(any(grepl("[[:alpha:]]", v1))){
v1 <- recode(v1, "w"="1", "b"="2", "l"="3", "a"="4", "ai"="5", "hi"="6", "bw"="7",
"his"="3", "baa"="2", "lat"="3", "hila"="3", "native"="5", "five"="5", "amin"="5", "pac"="6", "six"="6")
if(any(grepl("[[:alpha:]]", v1))){
v1 <- ifelse(grepl('pac.*(isl|haw|nat)|nhopi|nat.*haw|haw.*pac|hawai|philip|polynes|samoa|pacific|tonga|hawpi|aorpi|micrones|fiji|maori|vanuat|tuval|palau|pacif|nauru|fil(l|)ipin|islander|malay|melanes|nhorpi', v1), '6',
ifelse(grepl('(amer|alask).*(ind|nat)|(nat|ind).*(alask|amer)|(nat|am).*ind|nat.*am|ind.*nat|indigen|alaska|aioan', v1), '5',
ifelse(grepl('africa|black|westindi|jamaica|blk|somali|morocc|egypt|nigeria', v1), '2',
ifelse(grepl('^((f|m|e|d|s|)hisp|latin|hislat|spanis|hipanic|lathis)|costaric|venezu|southam|salvador|mexic|ecua(d|t)or|puertoric|portugs|nicarag|bolivi|peruvi|hispanic|latin|chican|brazil|argentin', v1), '3', v1)
)))
}
}
}
}
if(full_names){
v1 <- recode(v1, "1"="White", "2"="Black or African American", "3"="Hispanic or Latino", "4"="Asian", "5"="American Indian or Alaska Native", "6"="Native Hawaiian or Other Pacific Islander", "7"="Two or More Races")
}
v1
}
#' Samantha Rhoads's function to recode gender more quickly than prior versions!!
#' @export
#' @examples
#' recode_gender(v)
recode_gender <- function(v){
v0 <- gsub("[[:space:]]| ", "", tolower(v)) %>% gsub("[[:punct:]]|[[:space:]]|nothispanic(orlatino).*|no(n|t)white.*", "", .)
v1 <- recode(v0, "male"="1", "female"="2", "nonbinary"="3", "unknown"="NA")
if(any(grepl("[[:alpha:]]", v1))){
gendertext <- c("\\bmale", "female|fmale", "nonbinary|other", "none|donotwishto|unknown|undefined|notprovid|decline|no.*(avail|applic)|\\bna\\b|nothin")
v1 <- #ifelse(grepl(gendertext[7], v1)&!grepl(paste0(setdiff(gendertext, gendertext[7]), collapse="|"), v1), "7",
# ifelse(grepl(gendertext[6], v1)&!grepl(paste0(setdiff(gendertext, gendertext[6]), collapse="|"), v1), "6",
# ifelse(grepl(gendertext[5], v1)&!grepl(paste0(setdiff(gendertext, gendertext[5]), collapse="|"), v1), "5",
# ifelse(grepl(gendertext[4], v1)&!grepl(paste0(setdiff(gendertext, gendertext[4]), collapse="|"), v1), "4",
ifelse(grepl(gendertext[3], v1)&!grepl(paste0(setdiff(gendertext, gendertext[3]), collapse="|"), v1), "3",
ifelse(grepl(gendertext[2], v1)&!grepl(paste0(setdiff(gendertext, gendertext[2]), collapse="|"), v1), "2",
ifelse(grepl(gendertext[1], v1)&!grepl(paste0(setdiff(gendertext, gendertext[1]), collapse="|"), v1), "1",
na_if_(v1))))#))))
if(any(grepl("[[:alpha:]]", v1))){
gendertext <- c("\\b(m|mal|man|he|amle)|him|dude|mascul|guy|bro|his|ftm|femaletomale|one|boy|01", "fem|f|woman|girl|lady|femal|she|her|gal|wman|weiblich|mtf|maletofemale|frau|two|wmn|02", "non.*bin|three|3|03", "unk")
v1 <- #ifelse(grepl(gendertext[7], v1)&!grepl(paste0(setdiff(gendertext, gendertext[7]), collapse="|"), v1), "7",
#                ifelse(grepl(gendertext[6], v1)&!grepl(paste0(setdiff(gendertext, gendertext[6]), collapse="|"), v1), "6",
#                       ifelse(grepl(gendertext[5], v1)&!grepl(paste0(setdiff(gendertext, gendertext[5]), collapse="|"), v1), "5",
#                              ifelse(grepl(gendertext[4], v1)&!grepl(paste0(setdiff(gendertext, gendertext[4]), collapse="|"), v1), "4",
ifelse(grepl(gendertext[3], v1)&!grepl(paste0(setdiff(gendertext, gendertext[3]), collapse="|"), v1), "3",
ifelse(grepl(gendertext[2], v1)&!grepl(paste0(setdiff(gendertext, gendertext[2]), collapse="|"), v1), "2",
ifelse(grepl(gendertext[1], v1)&!grepl(paste0(setdiff(gendertext, gendertext[1]), collapse="|"), v1), "1",
v1)))#))))
#
#
if(any(grepl("[[:alpha:]]", v1))){
v1 <- recode(v1, "m"="1", "f"="2", "n"="3", "her"="2", "g"="2", "his"="1")
if(any(grepl("[[:alpha:]]", v1))){
gendertext <- c("man|mal", "fe", "3", "unk")
v1 <- ifelse(grepl(gendertext[3], v1)&!grepl(paste0(setdiff(gendertext, gendertext[3]), collapse="|"), v1), "3",
ifelse(grepl(gendertext[2], v1)&!grepl(paste0(setdiff(gendertext, gendertext[2]), collapse="|"), v1), "2",
ifelse(grepl(gendertext[1], v1)&!grepl(paste0(setdiff(gendertext, gendertext[1]), collapse="|"), v1), "1",
v1)))#))))
}
#     if(any(grepl("[[:alpha:]]", v1))){
#       v1 <- ifelse(grepl('pac.*(isl|haw|nat)|nhopi|nat.*haw|haw.*pac|hawai|philip|polynes|samoa|pacific|tonga|hawpi|aorpi|micrones|fiji|maori|vanuat|tuval|palau|pacif|nauru|fil(l|)ipin|islander|malay|melanes|nhorpi', v1), '6',
#                    ifelse(grepl('(amer|alask).*(ind|nat)|(nat|ind).*(alask|amer)|(nat|am).*ind|nat.*am|ind.*nat|indigen|alaska|aioan', v1), '5',
#                           ifelse(grepl('africa|black|westindi|jamaica|blk|somali|morocc|egypt|nigeria', v1), '2',
#                                  ifelse(grepl('^((f|m|e|d|s|)hisp|latin|hislat|spanis|hipanic|lathis)|costaric|venezu|southam|salvador|mexic|ecua(d|t)or|puertoric|portugs|nicarag|bolivi|peruvi|hispanic|latin|chican|brazil|argentin', v1), '3', v1)
#                           )))
#     }
}
}
}
if(full_names){
v1 <- recode(v1, "1"="Male", "2"="Female", "3"="Non-Binary")
}
v1
}
#' Samantha Rhoads's function to recode gender more quickly than prior versions!!
#' @export
#' @examples
#' recode_gender(v)
recode_gender <- function(v, full_names=F){
v0 <- gsub("[[:space:]]| ", "", tolower(v)) %>% gsub("[[:punct:]]|[[:space:]]|nothispanic(orlatino).*|no(n|t)white.*", "", .)
v1 <- recode(v0, "male"="1", "female"="2", "nonbinary"="3", "unknown"="NA")
if(any(grepl("[[:alpha:]]", v1))){
gendertext <- c("\\bmale", "female|fmale", "nonbinary|other", "none|donotwishto|unknown|undefined|notprovid|decline|no.*(avail|applic)|\\bna\\b|nothin")
v1 <- #ifelse(grepl(gendertext[7], v1)&!grepl(paste0(setdiff(gendertext, gendertext[7]), collapse="|"), v1), "7",
# ifelse(grepl(gendertext[6], v1)&!grepl(paste0(setdiff(gendertext, gendertext[6]), collapse="|"), v1), "6",
# ifelse(grepl(gendertext[5], v1)&!grepl(paste0(setdiff(gendertext, gendertext[5]), collapse="|"), v1), "5",
# ifelse(grepl(gendertext[4], v1)&!grepl(paste0(setdiff(gendertext, gendertext[4]), collapse="|"), v1), "4",
ifelse(grepl(gendertext[3], v1)&!grepl(paste0(setdiff(gendertext, gendertext[3]), collapse="|"), v1), "3",
ifelse(grepl(gendertext[2], v1)&!grepl(paste0(setdiff(gendertext, gendertext[2]), collapse="|"), v1), "2",
ifelse(grepl(gendertext[1], v1)&!grepl(paste0(setdiff(gendertext, gendertext[1]), collapse="|"), v1), "1",
na_if_(v1))))#))))
if(any(grepl("[[:alpha:]]", v1))){
gendertext <- c("\\b(m|mal|man|he|amle)|him|dude|mascul|guy|bro|his|ftm|femaletomale|one|boy|01", "fem|f|woman|girl|lady|femal|she|her|gal|wman|weiblich|mtf|maletofemale|frau|two|wmn|02", "non.*bin|three|3|03", "unk")
v1 <- #ifelse(grepl(gendertext[7], v1)&!grepl(paste0(setdiff(gendertext, gendertext[7]), collapse="|"), v1), "7",
#                ifelse(grepl(gendertext[6], v1)&!grepl(paste0(setdiff(gendertext, gendertext[6]), collapse="|"), v1), "6",
#                       ifelse(grepl(gendertext[5], v1)&!grepl(paste0(setdiff(gendertext, gendertext[5]), collapse="|"), v1), "5",
#                              ifelse(grepl(gendertext[4], v1)&!grepl(paste0(setdiff(gendertext, gendertext[4]), collapse="|"), v1), "4",
ifelse(grepl(gendertext[3], v1)&!grepl(paste0(setdiff(gendertext, gendertext[3]), collapse="|"), v1), "3",
ifelse(grepl(gendertext[2], v1)&!grepl(paste0(setdiff(gendertext, gendertext[2]), collapse="|"), v1), "2",
ifelse(grepl(gendertext[1], v1)&!grepl(paste0(setdiff(gendertext, gendertext[1]), collapse="|"), v1), "1",
v1)))#))))
#
#
if(any(grepl("[[:alpha:]]", v1))){
v1 <- recode(v1, "m"="1", "f"="2", "n"="3", "her"="2", "g"="2", "his"="1")
if(any(grepl("[[:alpha:]]", v1))){
gendertext <- c("man|mal", "fe", "3", "unk")
v1 <- ifelse(grepl(gendertext[3], v1)&!grepl(paste0(setdiff(gendertext, gendertext[3]), collapse="|"), v1), "3",
ifelse(grepl(gendertext[2], v1)&!grepl(paste0(setdiff(gendertext, gendertext[2]), collapse="|"), v1), "2",
ifelse(grepl(gendertext[1], v1)&!grepl(paste0(setdiff(gendertext, gendertext[1]), collapse="|"), v1), "1",
v1)))#))))
}
#     if(any(grepl("[[:alpha:]]", v1))){
#       v1 <- ifelse(grepl('pac.*(isl|haw|nat)|nhopi|nat.*haw|haw.*pac|hawai|philip|polynes|samoa|pacific|tonga|hawpi|aorpi|micrones|fiji|maori|vanuat|tuval|palau|pacif|nauru|fil(l|)ipin|islander|malay|melanes|nhorpi', v1), '6',
#                    ifelse(grepl('(amer|alask).*(ind|nat)|(nat|ind).*(alask|amer)|(nat|am).*ind|nat.*am|ind.*nat|indigen|alaska|aioan', v1), '5',
#                           ifelse(grepl('africa|black|westindi|jamaica|blk|somali|morocc|egypt|nigeria', v1), '2',
#                                  ifelse(grepl('^((f|m|e|d|s|)hisp|latin|hislat|spanis|hipanic|lathis)|costaric|venezu|southam|salvador|mexic|ecua(d|t)or|puertoric|portugs|nicarag|bolivi|peruvi|hispanic|latin|chican|brazil|argentin', v1), '3', v1)
#                           )))
#     }
}
}
}
if(full_names){
v1 <- recode(v1, "1"="Male", "2"="Female", "3"="Non-Binary")
}
v1
}
#' Samantha Rhoads's function to recode race more quickly than prior versions!!
#' @export
#' @examples
#' recode_race(v)
recode_race <- function(v, full_names=F){
v0 <- gsub("[[:space:]]| ", "", tolower(v)) %>% gsub("2(\\+|ormore|plus).*", "twoormoreraces", .) %>% gsub("[[:punct:]]|[[:space:]]|nothispanic(orlatino).*|no(n|t)white.*", "", .) %>% gsub("no(n|t)his.*lat.*", "", .)
v1 <- recode(v0, "white"="1", "blackorafricanamerican"="2", "hispanicorlatino"="3", "asian"="4", "americanindianoralaskanative"="5", "nativehawaiianorotherpacificislander"="6", "twoormoreraces"="7")
if(any(grepl("[[:alpha:]]", v1))){
racetext <- c("white|caucasian|irish", "black|africa", "hispan|latino|latinx", "asia(|n)", "am.*ind|nat.*am", "pac.*isl|nat.*hawai|nhopi", "twoormore")
v1 <- ifelse(grepl(racetext[7], v1)&!grepl(paste0(setdiff(racetext, racetext[7]), collapse="|"), v1), "7",
ifelse(grepl(racetext[6], v1)&!grepl(paste0(setdiff(racetext, racetext[6]), collapse="|"), v1), "6",
ifelse(grepl(racetext[5], v1)&!grepl(paste0(setdiff(racetext, racetext[5]), collapse="|"), v1), "5",
ifelse(grepl(racetext[4], v1)&!grepl(paste0(setdiff(racetext, racetext[4]), collapse="|"), v1), "4",
ifelse(grepl(racetext[3], v1)&!grepl(paste0(setdiff(racetext, racetext[3]), collapse="|"), v1), "3",
ifelse(grepl(racetext[2], v1)&!grepl(paste0(setdiff(racetext, racetext[2]), collapse="|"), v1), "2",
ifelse(grepl(racetext[1], v1)&!grepl(paste0(setdiff(racetext, racetext[1]), collapse="|"), v1), "1",
v1)))))))
if(any(grepl("[[:alpha:]]", v1))){
racetext <- c("wh|nonminority|polish|swed(e|is)|greek|1", "blk|afr|jamaic|egypt|somali|westindi|2", "hisp|lat|mexic|span|venezu|hondur|nicarag|puer.*ric|dominic|cuba|brazil|guatem|colombi|boliv|argenti|argentin|centralamer|salvad|3", "asia(|n)|chin|japa|korea|4", "am.*(ind|nat|alask|ak)|nat.*(am|ind|alask|ak)|ind.*(am|nat|alask|ak)|(alask|ak).*(am|nat)|5", "pac.*isl|nat.*hawai|nhopi|hawai|hopi|nhop|pacif|islander|tagal(a|o)|fil(l|)ipi", "twoormore|twoplus|races|multiple|morethan|twoorm|7")
v1 <- ifelse(grepl(racetext[7], v1)&!grepl(paste0(setdiff(racetext, racetext[7]), collapse="|"), v1), "7",
ifelse(grepl(racetext[6], v1)&!grepl(paste0(setdiff(racetext, racetext[6]), collapse="|"), v1), "6",
ifelse(grepl(racetext[5], v1)&!grepl(paste0(setdiff(racetext, racetext[5]), collapse="|"), v1), "5",
ifelse(grepl(racetext[4], v1)&!grepl(paste0(setdiff(racetext, racetext[4]), collapse="|"), v1), "4",
ifelse(grepl(racetext[3], v1)&!grepl(paste0(setdiff(racetext, racetext[3]), collapse="|"), v1), "3",
ifelse(grepl(racetext[2], v1)&!grepl(paste0(setdiff(racetext, racetext[2]), collapse="|"), v1), "2",
ifelse(grepl(racetext[1], v1)&!grepl(paste0(setdiff(racetext, racetext[1]), collapse="|"), v1), "1",
v1)))))))
if(any(grepl("[[:alpha:]]", v1))){
v1 <- recode(v1, "w"="1", "b"="2", "l"="3", "a"="4", "ai"="5", "hi"="6", "bw"="7",
"his"="3", "baa"="2", "lat"="3", "hila"="3", "native"="5", "five"="5", "amin"="5", "pac"="6", "six"="6")
if(any(grepl("[[:alpha:]]", v1))){
v1 <- ifelse(grepl('pac.*(isl|haw|nat)|nhopi|nat.*haw|haw.*pac|hawai|philip|polynes|samoa|pacific|tonga|hawpi|aorpi|micrones|fiji|maori|vanuat|tuval|palau|pacif|nauru|fil(l|)ipin|islander|malay|melanes|nhorpi', v1), '6',
ifelse(grepl('(amer|alask).*(ind|nat)|(nat|ind).*(alask|amer)|(nat|am).*ind|nat.*am|ind.*nat|indigen|alaska|aioan', v1), '5',
ifelse(grepl('africa|black|westindi|jamaica|blk|somali|morocc|egypt|nigeria', v1), '2',
ifelse(grepl('^((f|m|e|d|s|)hisp|latin|hislat|spanis|hipanic|lathis)|costaric|venezu|southam|salvador|mexic|ecua(d|t)or|puertoric|portugs|nicarag|bolivi|peruvi|hispanic|latin|chican|brazil|argentin', v1), '3', v1)
)))
}
}
}
}
if(full_names){
v1 <- recode(v1, "1"="White", "2"="Black or African American", "3"="Hispanic or Latino", "4"="Asian", "5"="American Indian or Alaska Native", "6"="Native Hawaiian or Other Pacific Islander", "7"="Two or More Races")
}
v1
}
