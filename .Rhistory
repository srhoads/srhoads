"personwasmanuallentered", "parttime", "orlatino", "officeservices",
"notspecified", "notself", "notrmation$", "notofhispanicorigin",
"notinsap", "notidentified", "nothispnc$", "nothispanicorlatino", "nothispanicc$","nothispanicnlatino",
"nothispanicorlatin$", "nothispanicorlat$", "nothispanicorla$", "nonhispanicorlatio$",
"nothispanicorl$", "nothispanicorhispanic", "nothispanicorhispan$",
"nothispanicorhispa$", "nothispanicorhisp$", "nothispanicorhis$",
"nothispaniclatino$", "nothispaniclatin$", "nothispaniclat$",
"nothispanicl$", "nothispanic$", "nothisorlat$", "notentered",
"notanswer", "norhispanicorlat$", "nonhispanicorhispanic$", "nonhispanicorhispan$",
"nonhispanicorhispa$", "nonhispanicorhisp$", "noidentif$", "noapplication",
"nisporlat$", "newjob", "neverinterviewed", "never", "morequalifiedcandidates",
"medical", "marketing", "managersap", "managers", "manager",
"management", "laboratory", "jobfairs", "jobfair", "irespond",
"iprefernot", "iprefer", "interviews", "interviewing", "interviewer",
"interviewee", "interviewed", "interview", "international", "internal",
"inanyofthealpeoplesofthefareastsoutheastasiathesubcontinentincludingfexamplecambodiachinaindiajapankeamalaysiapakistanthephilippineisls",
"inanyofthealpeoplesofthefareastsoutheastasiaortheindiansubcontinentincludingforexamplecambodiachinaindiajapankoreamalaysiapakistanthephilippineisls$",
"inactive", "ielectnotto", "idontanswer", "idonottoprovidethisinformation",
"idonottoanswer", "idonot", "identify", "identified", "identification",
"ichoosenot", "ichoose", "hiring", "generalmanagement", "function",
"fulltime", "extendedprofile", "employing", "employer", "employees",
"employeename", "employee", "employed", "email", "eeob", "dtoidentif$",
"donottoanswer", "donotselectthisoptionifoutoour$", "donotselectthisoptionifouour",
"doesnot", "distributiongraph", "disclosed", "disclose", "directors",
"directorof", "director", "diiweekly", "diibiweekly", "didnot",
"development", "description", "departments", "department", "declinto",
"declined", "decline", "databases", "database", "creativedesign", "missinlank",
"corporate", "consulting", "consultants", "consultant", "chosenot",
"choosenotto", "choosenot", "chieffinancialofficer", "centralretail", "notresponse",
"businesses", "business", "benefitsadminretail", "behavioralhealth",
"bartenders", "bartender", "available", "atthistime", "associates", "none listed",
"associate", "assistants", "assistant", "applicant", "apersonwhiteoidentifieswhitehmoraeofthefollowingasdefinedabovewhiteblackorafricanamericannativehawaiianorpacificislerasianoramericanindianoralaskanative$",
"apersonhavingoriginsinanyoftheoriginalpeoplesofthefareastsoutheastasiaortheindiansubcontinentincludingforexamplecambodiachinaindiajapankoreamalaysiapakistanthephilippineislsthailvietnam$",
"apersonhavingoriginsinanyoftheoriginalpeoplesofeuropemiddleeastornorthafrica$", "applicationreceivedtoolate",
"answer$", "anonymized", "advancedpractice", "administrative", "^stoidentifv","^tospecif$","newspapermagazinead",
"accounting", "â", "^toidentif$", "^stov$", "^specif$", "^snav$", "universityjobposting","craigslist","monstercom","universitjobposting",
"^self$", "^oput$", "^nottom$", "^notto$", "^nottmation", "^nothis$", "notrpted","information", "followstepscompleteeeoinfo","technologl","newspapermagazinead",
"^noidentif$", "^noident>\\", "^iself$", "^identif$", "^id$", "donotidentif$","noidentidentif$","simplhired","$rnotdeclared","^hourl$","applicationreceivedolate","temporaroncall",
"^fillin$", "^donot$", "^answer$", "^answer", "semimonthly", "wwwindeedcom", "careerfair", "internet", "cidatetakesteps",
"morequalifiedcidate", "technolog$", "monthly","identif$",
"followstepscompleteeeoinfo", "followstepstocompleteeeoinfo", "notclassified", "ziprecruiter", "lackseducationrequiredfortheposition", "pharmadiversit$", "americanjobexchange"),
collapse = "|")
recode_na_list <- list(
"NA" = c(" ", ",", "active", "admin", "agency", "aliennonresident",
"american", "anonymized", "answe", "answer1", "answeredhispaniclatinoquestion",
"arbpayroll", "blackafricanamerican", "brazilmonthly", "candidateeeo",
"centralislipny", "choosenotrodisclose", "choosenottodisclose",
"choosenottoidentify", "chosenottodisclose", "chosenottoselfidentify",
"claimingdisabilitystat", "clericalunitclerk", "cocreatepayroll",
"coders", "comalepanyjobboard", "dateofinterview", "declin", "notnoresponse",
"decline", "declined", "declinedtoanswer", "declinedtoselfidentify",
"declinedtostate", "declineselfidentification", "declinetoanswer",
"declinetodisclose", "declinetoid", "declinetoidentify", "declinetoselfidentify",
"declinetostate", "declintoself", "demoapplication", "deputyprojectmanager",
"description", "didnotanswer", "didnotdisclose", "didnotintvwell",
"didnotrespond", "didnotselfid", "didnotspecify", "didnotwishtoanswer",
"didntid", "directsourcedlinkedin", "doesindentify", "doesnot",
"doesnotwishtoidentify", "doesnotwishtoprovide", "doesnt", "donotidentify",
"donotselectthisoptionifyoutoyour", "donotselectthisoptionifyouyour",
"donotwishto", "donotwishtoanswer", "duplicate", "eeo", "eeob",
"eeoc", "emailedsurvey", "ethnicorigin", "eval", "EVENTUALLYWEWILLDELETEITBUTWENEEDTHEPLACEHOLDER",
"executive", "external", "fax", "firstname", "fisbiweeklyhourly",
"fissemimonthly", "flsaid", "ft", "ftpt", "fulltime", "functiontesttechnician",
"gender", "grp", "ichoosenotoselfidentify", "ichoosenotprovideinformation",
"ichoosenotselfidentify", "ichoosenottodisclose", "ichoosenottodisclosethisinformation",
"ichoosenottoidentify", "ichoosenottoprovideinformation", "ichoosenottoprovidemy",
"ichoosenottorespond", "ichoosenottoselfid", "ichoosenottoselfidenitfy",
"ichoosenottoselfidentify", "ichoosenottoselfidentifyatthistime",
"ideclinetoanswer", "ideclinetorespond", "ideclinetoselfidentify",
"identifiedasunknown", "idonottoanswer", "idonottoprovidethisinformation",
"idonottoself", "idonotwishtofurnishthisinformation", "idonotwishtoprovidethisinfo",
"idonotwishtoprovidethisinformation", "idonotwishtoselfidentify",
"idonotwishtoselfidentifyatthistime", "idont", "idonttoanswer",
"idontwishtoanswer", "ielectnotto", "ielectnottoselfidentify",
"ignore", "incomplete", "internal", "interviewcancelled", "interviewdate",
"iprefernotanswer", "iprefernottoanswer", "iprefernottodisclose",
"jonesboroar", "lacksrequiredqualifications", "lastname", "management",
"materialcontrolattendant", "miami", "missing", "missingor",
"more", "morequalifiedcandidates", "mtgbankingdivisionadmin",
"mtspayrollus", "multiple", "nainquire", "nameofindividualcompletingform",
"nanon", "nanonnotapplicablenon", "ncsd", "newyorkny", "nhispanic",
"nnotspecified", "noanswer", "noanswerseeinperson", "noanswerselected",
"noapplicablecode", "noapplication", "nodatacollected", "nodisclosure",
"noentify", "noid", "noident", "noidentified", "noidentify",
"noinfo", "noinformation", "nondisclosed", "nondisclosure", "none",
"nonegiven", "nonelisted", "noneprovided", "nonespecified", "nonreported",
"nonresalien", "nonresidentalien", "noreponse", "noresponse",
"norinfo", "nortspecify", "noselection", "noselfid", "notappearinginhrm",
"notapplicable", "notapplicablenon", "notassigned", "notavailable",
"notcaptured", "notcollected", "notcompleted", "notdeclared",
"notdefinedinsap", "notdesignatedinsap", "notdisabledofccp",
"notdisclosed", "notentered", "notgiven", "nothispanic", "notidentified",
"notindicated", "notinformation", "notinsap", "notknown", "notlisted",
"notlistedinsap", "notprovided", "notrecorded", "notreported",
"notreporting", "notreturned", "notself", "notspec", "notspecif",
"notspecified", "notspecifiedinactive", "notspecify", "notspecnotspecified",
"notthisquestion", "null", "nurse", "nursesaide", "nursing",
"nyitbeijing", "nyitnanjing", "nyitvancouver", "octagmktng",
"oldwestburyny", "optedout", "optout", "oput", "orderly", "other",
"parttime", "personal banker", "phonescreeen", "prefernotsay",
"prefernottoanswer", "prefernottodisclose", "prefernottosay",
"prefernottospecify", "prefers", "prefersnottoanswer", "professional",
"professionals", "professor", "provide", "providisinfo", "providisinformation",
"pt", "ptft", "racialcategory", "railcartechnician", "rathernot",
"referral", "referralsource", "refetodisclose", "refused", "rehire",
"reloagent", "requisitionfilledresumenotreviewed", "requisitionsid",
"rmation", "sales", "salesworkers", "sandiego", "sanjose", "sdeclinetov",
"sentemail", "service", "sgother", "snav", "staffnurse", "stov",
"technical", "thisquestion", "totals", "ukn", "unavail", "undata",
"undeclared", "undisclosed", "unknown", "unknowndeclinedtodisclose",
"unknownpersonwasmanuallyentered", "unknwn", "unkown", "unkwn", "",
"unotknow", "unspec", "unspecified", "usbiweekly", "xx")
)
recode_race_getridofstrregex <- paste0(c("yes", "wish", "us", "unitedstatesofamerica", "to", "sgp","state",
"self", "selected", "region", "raceethnicity", "race", "other",
"othe", "oth$", "origins", "origin", "only", "ofany", "obsolete",
"notofhispanic$", "notlatino$", "nothisporlatino", "nothispnc$",
"nothispanicorlatino", "nothispanicorl$", "nothispanicor$", "nothispanicoflatino",
"nothispaniclatinononhispanic$", "nothispaniclatino", "nothispanichispanic$",
"nothispanichis$", "nothispaniceorlatino", "nothispanic$", "nothislatino$",
"nothislat$", "nothis$", "norhispanic$", "norhislatino$", "norhis$",
"noofhispanic$", "nonwhite", "nonhispanicorlatino", "nonhispanicor$",
"nonhispaniclatino", "nonhispanichispanic$", "nonhispanichis$",
"nonhispanic$", "nonhislat$", "nonhis$", "nonexempttoexempt",
"nofhispanic$", "nispnlatino$", "nisplatino", "nisplat$", "nispanicorlatino",
"nispanic$", "nispanc$", "nislatino$", "nislatin$", "nislat$",
# "males", "male",
"lessthan", "ï", "hours", "heritage", "half",
"gender", "gb", "furnish",
# "females", "female",
"ethnicity",
"ethnic", "eorlatino", "dta", "donottoself", "donotto", "cmty",
"apersonhavingorigins", "alls", "^nhispanic$", "^dstate"),
collapse="|")
recode_gender_getridofstrregex <- paste0(c("gender", "sexis", "earnings", "sex", "tospecife", "lessthan", "over", "other",
"inanyofthealpeoplesofthefareastsoutheastasiathesubcontinentincludingfexamplecambodiachinaindiajapankeamalaysiapakistanthephilippineisls",
"noselfid", "assume", "senior", "junior", "applicantselected","other", "non","unotknow","y","ukn",
"apersonhavingiginsinanyoftheiginalpeoplesofthefareastsoutheastasiathesubcontinentincludingfexamplecambodiachinaindiajapankeamalaysiapakistanthephilippineislsthailvietnam",
"and", "selected", "tonot", "self", "professionals", "professional", "toidentif$",
# "afircanamerican", "africanamerican", "hispanic", "africanamerican", "amerindalas", #"ornotorlatino", "notorlatino", "ormoreraces",# "white", "black", "non", "hisanic", "asian", "nativeamerican", # "hisanic",
"ethnicity", "ethnicit", "ethnici", "ethnic", "ethni", "ethn", "eth", "donotselectthisoptionifyouyour", "apersonhavingiginsinanyoftheiginalpeoplesofeuropemiddleeastnthafrica"
),
collapse="|")
dfsample <- data.frame(gender = c("male", "female", "female",
"female", "female", "female",
"male", "female", "male",
"male", "male", "male",
"female", "female", "female",
"female", "female", "female",
"female", "female", "male",
"male"),
race = c("white", "white",
"native hawaiian or other pacific islander",
"black or african american",
"american indian or alaska native",
"hispanic or latino",
"asian",
"black or african american",
"american indian or alaska native",
"white",
"two or more races", "two or more races",
"american indian or alaska native",
"american indian or alaska native",
"native hawaiian or other pacific islander",
"hispanic or latino",
"hispanic or latino",
"white", "white",
"hispanic or latino",
"hispanic or latino",
"native hawaiian or other pacific islander"),
name = c("jason o'rawe", "samantha karlaina rhoads", "keisha castle-hughes",
"oprah winfrey", "shoni schimmel", "alexandria ocasio-cortez",
"kendrick kang-joh jeong","purdie greenaway, valerie", "silverheels, jay",
"jadrian charles guy", "jordan peele", "keegan-michael key",
"davids, sharice", "deb haaland", "dinah jane hansen",
"ochoa, ellen", "sonia sotomayor", "ruth bader ginsburg",
"natalia nikolaevna zakharenko", "kahlo, frida", "diego rivera",
"momoa, jason"), stringsAsFactors = F)
dfincase <- data.frame(name=c('charlene teters', 'sandra sunrising osawa'),
firstname=c('charlene', 'sandra sunrising'),
lastname=c('teters', 'osawa'),
gender=c('female', 'female'),
race=c('american indian or alaska native', 'american indian or alaska native'),
stringsAsFactors = F)
types <- c('ADDL COMP', 'APPLICANTS', 'NEW HIRES', 'PROMOTIONS', 'TERMINATIONS', 'WORKFORCE')
# functions.R
#' A function to do grep() but pasting a vec instead of just a string
#'
#' This function allows you to do grep() but pasting a vec instead of just a string
#'
#' @export
#' @examples
#' grep_(pattern, v, exact=F, ignore.case=F, value=F)
grep_ <- function(pattern, v, exact=F, ignore.case=F, value=F) grep(paste_regex(pattern, exact=exact), v, ignore.case=ignore.case, value=value)
#' A function to find matching string anywhere in a dataframe
#'
#' This function allows you to find matching string anywhere in a dataframe
#' @export
#' @examples
#' grep_all_df_df(pattern, df, exact=F, ignore.case=F, print=F)
grep_all_df_df <- function(pattern, df, exact=F, ignore.case=F, print=F){
loc <- lapply(df, function(v) grep_(pattern, v, exact=exact, value = F, ignore.case=ignore.case)) %>% unlist()
if(print) print(loc)
df[loc, ]
}
#' A function to find matching string anywhere in a dataframe
#'
#' This function allows you to find matching string anywhere in a dataframe
#' @export
#' @examples
#' grep_all_df_colnames(pattern, df, exact=F, ignore.case=F, print=F)
grep_all_df_colnames <- function(pattern, df, exact=F, ignore.case=F, print=F){
loc <- lapply(df, function(v) grep_(pattern, v, exact=exact, value = T, ignore.case=ignore.case)) %>% drop_empty()
if(print) print(loc)
names(loc)
}
#' A function to find matching string anywhere in a dataframe
#'
#' This function allows you to find matching string anywhere in a dataframe
#' @export
#' @examples
#' grep_all_df(pattern, df, colnames=F, exact=F, ignore.case=F, print=F, cells_only=F, cells_only_discrete=F, rownums_only=F)
grep_all_df <- function(pattern, df, colnames=F, exact=F, ignore.case=F, print=F, cells_only=F, cells_only_discrete=F, rownums_only=F){
df$rownum <- 1:nrow(df)
if(colnames) grep_all_df_colnames(pattern, df, exact=exact, ignore.case=ignore.case, print=print)
else if(cells_only) {
colnamez <- grep_all_df_colnames(pattern, df, exact=exact, ignore.case=ignore.case, print=print)
grep_all_df_df(pattern, df, exact=exact, ignore.case=ignore.case, print=print) %>% select(one_of(c(colnamez, "rownum")))
}
else if(cells_only_discrete){
colnamez <- grep_all_df_colnames(pattern, df, exact=exact, ignore.case=ignore.case, print=print)
cellsdf <- grep_all_df_df(pattern, df, exact=exact, ignore.case=ignore.case, print=print) %>% select(one_of(c(colnamez)))#, "rownum")))
# rownames(cellsdf) <- make.unique(as.character(cellsdf$rownum))
lapply(cellsdf, function(v) grep_(pattern, v, exact=exact, ignore.case=ignore.case, value=T) %>% #paste0(., grep_(pattern, v, exact=exact, ignore.case=ignore.case, value=F)))
tibble(value=., rownum=grep_(pattern, v, exact=exact, ignore.case=ignore.case, value=F)) %>%
dplyr::group_by(value) %>% dplyr::summarize(rownum = paste0(rownum, collapse=", ")))
}
else if(rownums_only){
colnamez <- grep_all_df_colnames(pattern, df, exact=exact, ignore.case=ignore.case, print=print)
grep_all_df_df(pattern, df, exact=exact, ignore.case=ignore.case, print=print) %>% .$rownum #select(one_of("rownum")) %>% dplyr::distinct() %>% unlist() %>% as.character()
}
else grep_all_df_df(pattern, df, exact=exact, ignore.case=ignore.case, print=print)
}
##### OLD VERSION:
# _______grep_all_df <- function(pattern, df, colnames=F, exact=F, ignore.case=F, print=F){
#   if(colnames) grep_all_df_colnames(pattern, df, exact=exact, ignore.case=ignore.case, print=print)
#   else grep_all_df_df(pattern, df, exact=exact, ignore.case=ignore.case, print=print)
# }
#' A function to do gsub() but pasting a vec instead of just a string
#'
#' This function allows you to do gsub() but pasting a vec instead of just a string
#'
#' @export
#' @examples
#' gsub_(pattern, to, v, exact=F, ignore.case=F)
gsub_ <- function(pattern, to, v, exact=F, ignore.case=F) gsub(paste_regex(pattern, exact=exact), to, v, ignore.case=ignore.case)
#' A function to do gsub() but ignoring case as default & pasting a vec instead of just a string
#'
#' This function allows you to do gsub() but ignoring case as default & pasting a vec instead of just a string
#'
#' @export
#' @examples
#' gsubic(pattern, to, v, exact=F, ignore.case=T)
gsub_ic <- function (pattern, replacement, x, ignore.case=T, perl = FALSE,
fixed = FALSE, useBytes = FALSE, exact=F) {
pattern <- paste_regex(pattern, exact=exact)
if (!is.character(x))
x <- as.character(x)
.Internal(gsub(as.character(pattern), as.character(replacement),
x, ignore.case, perl, fixed, useBytes))
}
#' Samantha Rhoads's function to...
#'
#' Srhoads wrote this to allow you to...
#' @export
#' @examples
#' grep_ic()
grep_ic <- function (pattern, x, ignore.case = T, perl = FALSE, value = FALSE,
fixed = FALSE, useBytes = FALSE, invert = FALSE) {
if (!is.character(x))
x <- structure(as.character(x), names = names(x))
.Internal(grep(as.character(pattern), x, ignore.case, value,
perl, fixed, useBytes, invert))
}
#' Samantha Rhoads's function to...
#'
#' Srhoads wrote this to allow you to...
#' @export
#' @examples
#' grepl_ic()
grepl_ic <- function (pattern, x, ignore.case = T, perl = FALSE, fixed = FALSE,
useBytes = FALSE) {
if (!is.character(x))
x <- as.character(x)
.Internal(grepl(as.character(pattern), x, ignore.case, FALSE,
perl, fixed, useBytes, FALSE))
}
#' A function kinda like `dplyr`'s `select()` but works on lists
#'
#' This function is kinda like `dplyr`'s `select()` but works on selecting stuff from lists
#'
#' @export
#' @examples
#' select_list(list, pattern, exact=F, ignore.case=T)
select_list <- function(list, pattern, exact=F, ignore.case=T) list[grep_(pattern, names(list), exact=exact, ignore.case=ignore.case)]
#' A function that brings a desired word to the front of a string
#'
#' This function brings a desired word to the front of a string (reorders string itself)
#'
#' @export
#' @examples
#' word_to_front(wrd, v)
word_to_front <- function(wrd, v) {
wrd1 <- paste0(wrd, " ")
wrd2 <- paste0(wrd, "$")
wrd3 <- paste0(wrd, "-")
wrd4 <- paste0(wrd, "_")
v <- sub(paste0('^(.*) ', wrd1), paste0(wrd, ' \\1 '), v)
v <- sub(paste0('^(.*) ', wrd2), paste0(wrd, ' \\1 '), v)
v <- sub(paste0('^(.*) ', wrd3), paste0(wrd, '-\\1 '), v)
v <- sub(paste0('^(.*) ', wrd4), paste0(wrd, ' \\1 '), v)
trimws_(v)
}
#' A function that reminds us what some regular expressions are, like and/or
#'
#' This is a function
#'
#' @export
#' @examples
#' regex_info()
regex_info <- function(){
data.frame(
type = c(
'alpha',
'alnum',
'and',
'or',
'escape'
),
regex = c(
'[[:alpha:]]',
'[[:alnum:]]',
'.*',
'|',
'\\'
)
)
}
#' A function that acts like `recode()` but works on a list
#'
#' This is a function
#'
#' @export
#' @examples
#' recode_from_list(v, recode_list = list('NA' = c('na', 'not applicable'), 'TRUE' = c('true', 'tru')))
recode_from_list <- function(v, recode_list = list('NA' = c('na', 'not applicable'),
'TRUE' = c('true', 'tru'))){
v <- tolower(v) %>% trimws_() %>% gsub('\\&', 'and', .) %>% gsub('\\.|\\(|\\)', '', .) %>% gsub('-', ' ', .) %>% trimws_()
v <- gsub("[^ |[:alpha:]]", "", v, perl = T)
v <- tolower(v)
recode_key <- lapply(names(recode_list), function(x) {
to_recode <- recode_list[[x]]
setNames(rep(x, length(to_recode)), to_recode)
})
recode_key <- unlist(recode_key)
v <- dplyr::recode(v, !!!recode_key)
gsub("^NA$", NA, v, perl = T)
}
#' A function that finds strings in a dataframe anywhere (like `grep()` but many strings)
#'
#' This is a function
#'
#' @export
#' @examples
#' findme(d=df00.5, g1="", g2="", g3="", g4="", g5="")
findme <- function(d=df00.5, g1="", g2="", g3="", g4="", g5=""){
(data.frame(grep_all_df(g1, d, ignore.case = T))) %>%
grep_all_df(g2, ., ignore.case = T) %>%
grep_all_df(g3, ., ignore.case = T) %>%
grep_all_df(g4, ., ignore.case = T) %>%
grep_all_df(g5, ., ignore.case = T) %>%
data.frame(., row.names = NULL)
}
#' A function that rounds up to next highest digit base #, ie, to 100 or 1000 or 1000 etc...
#'
#' This is a function
#'
#' @export
#' @examples
#' roundupc(x)
roundupc <- function(x) 10^ceiling(log10(x))
#' A function that gets 5 digit zip codes
#'
#' This function extracts relevant first 5 digits from zip code when it's formatted like 11111-1111
#'
#' @export
#' @examples
#' zipcode5()
zipcode5 <- qdapRegex::rm_(pattern="(?<!\\d)\\d{5}(?!\\d)", extract=TRUE)
zipcode5("meo")
zipcode5("meo81294722")
zipcode5("meo81294722 29221")
gsub("(?<!\\d)\\d{5}(?!\\d)", "", "meo81294722 29221")
drop_empty
roxygen2::roxygenise(clean = TRUE)
tidyverse_packages()
RFs <- readLines("R/functions.R")
RFs2 <- RFs %>% stringr::str_extract_all(., ".*::")
RFs3 <- RFs2 %>% unlist() %>% unique()
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1)
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique()
RFs3
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub(".*(", "", .) %>% unique()
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub(".*\\(", "", .) %>% unique()
RFs3
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub(".*\\(|.*\\{", "", .) %>% unique()
RFs3 %>%
gsub("::", "", .) %>% unique()
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub(".*\\(|.*\\{|.*\\!", "", .) %>% unique()
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub(".*\\(|.*\\{|.*\\!|.*\\,", "", .) %>% unique()
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub(".*\\(|.*\\{|.*\\!|.*\\,|.*\\||.*\\-", "", .) %>% unique()
RFs3 %>%
gsub("::", "", .) %>% unique()
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub(".*\\(|.*\\{|.*\\!|.*\\,|.*\\||.*\\-|.*[[::punct::]]", "", .) %>% unique()
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub(".*\\(|.*\\{|.*\\!|.*\\,|.*\\||.*\\-|.*[[:punct:]]", "", .) %>% unique()
RFs3 %>%
gsub("::", "", .) %>% unique()
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub("::", "", .) %>%
gsub(".*[[:punct:]]", "", .) %>% unique()
RFs3
RFs3
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub("::", "", .) %>%
gsub(".*[[:punct:]]", "", .) %>% unique()
RFs3
setdiff(RFs3, tidyverse_packages())
setdiff(RFs3, tidyverse_packages()) %>%
cat()
setdiff(RFs3, tidyverse_packages()) %>%
cat(., "\n")
setdiff(RFs3, tidyverse_packages()) %>%
catn()
setdiff(RFs3, tidyverse_packages()) %>%
paste0(., "\n") %>%
catn()
setdiff(RFs3, tidyverse_packages()) %>%
paste0(., ",\n") %>%
catn()
devtools::document()
system('git add -A && git commit -m "Added dependencies to DESCRIPTION FILE in hopes that it will allow my package to be imported in deployed apps"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
as_tibble
tibble::as_tibble
dplyr::matches
dplyr::everything
# library(srhoads)
RFs <- readLines("R/functions.R")
RFs2 <- RFs %>% stringr::str_extract_all(., ".*::")
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub("::", "", .) %>%
gsub(".*[[:punct:]]", "", .) %>% unique()
library(srhoads)
# library(srhoads)
RFs <- readLines("R/functions.R")
RFs2 <- RFs %>% stringr::str_extract_all(., ".*::")
library(tidyverse)
# library(srhoads)
RFs <- readLines("R/functions.R")
RFs2 <- RFs %>% stringr::str_extract_all(., ".*::")
RFs3 <- RFs2 %>% unlist() %>% unique() %>%
word(., -1) %>% unique() %>%
gsub("::", "", .) %>%
gsub(".*[[:punct:]]", "", .) %>% unique()
DESCRs <- readLines("DESCRIPTION") %>% setNames(names(.) <- .) %>% as.list()
STARTLINE <- DESCRs %>% grep("Imports:", .) + 1
ENDLINE <- DESCRs %>% grep("License:", .) - 1
(PkgsAlreadyInDESCR <- DESCRs[STARTLINE:ENDLINE] %>% names() %>% gsub("[^[:alnum:]]", "", .))
setdiff(RFs3, tidyverse_packages()) %>%
setdiff(., PkgsAlreadyInDESCR) %>%
paste0(., ",\n") %>%
catn()
devtools::document() # roxygen2::roxygenise(clean = TRUE)
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
roxygen2::roxygenise(clean = TRUE)
devtools::document() # roxygen2::roxygenise(clean = TRUE)
system('git add -A && git commit -m "new functions added/edited"; git push') ### --- SHELL if you remove system()
devtools::install_github('srhoads/srhoads')
devtools::document() # roxygen2::roxygenise(clean = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::document()
